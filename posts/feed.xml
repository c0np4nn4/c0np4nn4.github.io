<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>My Blog</title>
	<subtitle>My blog site.</subtitle>
	<link href="https://c0np4nn4.github.io/posts/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://c0np4nn4.github.io/posts/"/>
	<updated>2025-06-04T00:00:00+00:00</updated>
	<id>https://c0np4nn4.github.io/posts/feed.xml</id>
	<entry xml:lang="en">
		<title>Modern Algebra (7-1) 군의 정의와 예</title>
		<published>2025-06-04T00:00:00+00:00</published>
		<updated>2025-06-04T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/course-2025-modern-algebra-7-1/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/course-2025-modern-algebra-7-1/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;현대대수학 (추상대수학) Hungerford 3판의 내용 중 일부를 정리했습니다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;군은 하나의 연산을 갖는 대수체계이다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-permutation&quot;&gt;(&lt;txtgrn&gt;Example&lt;&#x2F;txtgrn&gt;) permutation&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-permutation&quot; aria-label=&quot;Anchor link for: example-permutation&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;집합 $T$의 치환(permutation)은 그 원소들의 순열을 의미한다.
예를 들어, $T=\lbrace 1, 2, 3\rbrace$에는 아래와 같이 여섯 가지의 가능한 치환이 있다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
123 &amp;amp;&amp;amp; 132 &amp;amp;&amp;amp; 213 &amp;amp;&amp;amp; 231 &amp;amp;&amp;amp; 312 &amp;amp;&amp;amp; 321
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;어떤 전단사(&lt;em&gt;bijective&lt;&#x2F;em&gt;)함수 $f: T \rightarrow T$를 이러한 치환을 나타내는 함수로 정의할 수 있다.
예를 들어, $f(1) = 2, f(2) = 3, f(3) = 1$은 $(123) \rightarrow (231)$로의 치환을 나타낸다.&lt;&#x2F;p&gt;
&lt;p&gt;이러한 치환을 두 행으로 나누어 표현하면 아래와 같다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{pmatrix}
1 &amp;amp; 2 &amp;amp; 3 \newline
2 &amp;amp; 3 &amp;amp; 1
\end{pmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;첫째 행이 원래 순열이고, 둘째 행이 치환된 순열이다.&lt;&#x2F;p&gt;
&lt;p&gt;이와 같이 모든 치환을 나타내면 아래와 같다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{pmatrix}
1 &amp;amp; 2 &amp;amp; 3 \newline
1 &amp;amp; 2 &amp;amp; 3
\end{pmatrix}
\begin{pmatrix}
1 &amp;amp; 2 &amp;amp; 3 \newline
1 &amp;amp; 3 &amp;amp; 2
\end{pmatrix}
\begin{pmatrix}
1 &amp;amp; 2 &amp;amp; 3 \newline
2 &amp;amp; 1 &amp;amp; 3
\end{pmatrix}
\begin{pmatrix}
1 &amp;amp; 2 &amp;amp; 3 \newline
2 &amp;amp; 1 &amp;amp; 3
\end{pmatrix}
\begin{pmatrix}
1 &amp;amp; 2 &amp;amp; 3 \newline
3 &amp;amp; 1 &amp;amp; 2
\end{pmatrix}
\begin{pmatrix}
1 &amp;amp; 2 &amp;amp; 3 \newline
3 &amp;amp; 2 &amp;amp; 1
\end{pmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;두 전단사 함수의 합성은 마찬가지로 전단사 함수가 되므로, 임의의 두 치환의 합성은 상기한 여섯 개의 치환 중 하나가 된다.
예를 들어, $f = \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 3 \newline 3 &amp;amp; 1 &amp;amp; 2 \end{pmatrix}, \quad g = \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 3 \newline 1 &amp;amp; 3 &amp;amp; 2 \end{pmatrix}$에 대하여&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
f \circ g = \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 3 \newline 3 &amp;amp; 1 &amp;amp; 2 \end{pmatrix} \circ \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 3 \newline 1 &amp;amp; 3 &amp;amp; 2 \end{pmatrix} \newline
\newline
(f \circ g)(1) = f(g(1)) = f(1) = 3 \newline
(f \circ g)(2) = f(g(2)) = f(3) = 2 \newline
(f \circ g)(3) = f(g(3)) = f(2) = 1
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;따라서, $f \circ g = \begin{pmatrix} 1 &amp;amp; 2 &amp;amp; 3 \newline 3 &amp;amp; 2 &amp;amp; 1 \end{pmatrix}$ 이다.&lt;&#x2F;p&gt;
&lt;p&gt;위 여섯 가지의 치환 집합을 $S_3$로 나타낼 수 있고, 연산 $(\circ)$는 집합 $S_3$의 연산이다.
그리고, 아래 두 성질들을 만족한다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;(&lt;txtylw&gt;닫힘&lt;&#x2F;txtylw&gt;) $f, g \in S_3$ 이면 $f \circ g \in S_3$이다.&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;txtylw&gt;결합법칙&lt;&#x2F;txtylw&gt;) $f, g, h \in S_3$일 때, $f \circ (g \circ h) = (f \circ g) \circ h$&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;txtylw&gt;항등원&lt;&#x2F;txtylw&gt;) $I = \begin{pmatrix}1 &amp;amp; 2 &amp;amp; 3 \newline 1 &amp;amp; 2 &amp;amp; 3\end{pmatrix}$에 대하여, 모든 $f \in S_3$ 는 $f \circ I = I \circ f = f$를 만족한다.&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;txtylw&gt;역원&lt;&#x2F;txtylw&gt;) 임의의 전단사 함수는 &lt;txtred&gt;역원&lt;&#x2F;txtred&gt;을 갖는다. 따라서, $f \in S_3$ 이면 $f \circ g = g \circ f = I$인 $g \in S_3$가 존재한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;blockquote class=&quot;callout tip has-title&quot;&gt;
  
  
  &lt;p class=&quot;title&quot;&gt;
    &lt;span class=&quot;icon&quot;&gt;
      &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;18&quot; height=&quot;18&quot;&gt;&lt;path d=&quot;M9.97308 18H11V13H13V18H14.0269C14.1589 16.7984 14.7721 15.8065 15.7676 14.7226C15.8797 14.6006 16.5988 13.8564 16.6841 13.7501C17.5318 12.6931 18 11.385 18 10C18 6.68629 15.3137 4 12 4C8.68629 4 6 6.68629 6 10C6 11.3843 6.46774 12.6917 7.31462 13.7484C7.40004 13.855 8.12081 14.6012 8.23154 14.7218C9.22766 15.8064 9.84103 16.7984 9.97308 18ZM10 20V21H14V20H10ZM5.75395 14.9992C4.65645 13.6297 4 11.8915 4 10C4 5.58172 7.58172 2 12 2C16.4183 2 20 5.58172 20 10C20 11.8925 19.3428 13.6315 18.2443 15.0014C17.624 15.7748 16 17 16 18.5V21C16 22.1046 15.1046 23 14 23H10C8.89543 23 8 22.1046 8 21V18.5C8 17 6.37458 15.7736 5.75395 14.9992Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;

    &lt;&#x2F;span&gt;
    &lt;strong&gt;대칭군&lt;&#x2F;strong&gt;
  &lt;&#x2F;p&gt;
  &lt;div class=&quot;content&quot;&gt;
    &lt;p&gt;에제에서 살펴본 이러한 군을 &lt;code&gt;n차 대칭군&lt;&#x2F;code&gt;(symmetric group of degree $n$)이라 한다.&lt;&#x2F;p&gt;

  &lt;&#x2F;div&gt;
  
&lt;&#x2F;blockquote&gt;

&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;위 예제를 토대로, 주요 성질을 추상화하여 군을 정의할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;def-group&quot;&gt;(&lt;txtgrn&gt;Def&lt;&#x2F;txtgrn&gt;) Group&lt;a class=&quot;zola-anchor&quot; href=&quot;#def-group&quot; aria-label=&quot;Anchor link for: def-group&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;다음 공리를 만족하는 이항연산 $\circ$ 를 갖는 공집합이 아닌 집합 $G$를 군(Group)이라 한다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;(&lt;txtylw&gt;닫힘&lt;&#x2F;txtylw&gt;) $f, g \in G$ 이면 $f \circ g \in G$이다.&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;txtylw&gt;결합법칙&lt;&#x2F;txtylw&gt;) $f, g, h \in G$일 때, $f \circ (g \circ h) = (f \circ g) \circ h$&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;txtylw&gt;항등원&lt;&#x2F;txtylw&gt;) 모든 원소 $f \in G$에 대하여 $f \circ I = I \circ f = f$를 만족하는 $I \in G$가 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;txtylw&gt;역원&lt;&#x2F;txtylw&gt;) 각 원소 $f \in G$에 대하여  $f \circ g = g \circ f = I$인 $g \in G$가 존재한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;그리고 &lt;txtylw&gt;교환법칙&lt;&#x2F;txtylw&gt;도 성립하면 &lt;code&gt;Abelian Group&lt;&#x2F;code&gt;이라 부른다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;5.&lt;&#x2F;code&gt; (&lt;txtylw&gt;교환법칙&lt;&#x2F;txtylw&gt;) 모든 $f, g \in G$에 대하여 $f \circ g = g \circ f$이다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;이 밖에도 &lt;em&gt;dihedral group&lt;&#x2F;em&gt;, &lt;em&gt;general linear group&lt;&#x2F;em&gt; (e.g. $GL(2, \mathbb{Z}_2$) 등이 존재한다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-cartesian-product-on-groups&quot;&gt;(&lt;txtred&gt;Thm&lt;&#x2F;txtred&gt;) Cartesian product on Groups&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-cartesian-product-on-groups&quot; aria-label=&quot;Anchor link for: thm-cartesian-product-on-groups&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;$G$와 $H$를 각각 연산 $*$, $\circ$를 갖는 군이라 하자. $G \times H$의 연산자 $\triangle$을&lt;&#x2F;p&gt;
&lt;p&gt;$$
(g, h) \triangle (g&#x27;, h&#x27;) = (g * g&#x27;, h \circ h&#x27;)
$$&lt;&#x2F;p&gt;
&lt;p&gt;와 같이 정의하면 $G \times H$는 군이다.&lt;&#x2F;p&gt;
&lt;p&gt;$G$, $H$가 Abelian group이면 $G \times H$도 abelian group이며, 두 군이 유한이면 $G\times H$도 유한군이 된다. 이 때 $|G \times H| = |G||H|$를 만족한다.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Modern Algebra (7-2) 군의 기본성질</title>
		<published>2025-06-04T00:00:00+00:00</published>
		<updated>2025-06-04T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/course-2025-modern-algebra-7-2/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/course-2025-modern-algebra-7-2/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;현대대수학 (추상대수학) Hungerford 3판의 내용 중 일부를 정리했습니다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;군의 기본성질&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-uniqueness-of-identity-and-inverse-element&quot;&gt;(&lt;txtred&gt;Thm&lt;&#x2F;txtred&gt;) Uniqueness of Identity and Inverse element&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-uniqueness-of-identity-and-inverse-element&quot; aria-label=&quot;Anchor link for: thm-uniqueness-of-identity-and-inverse-element&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;군 $G$에 대하여 $a, b ,c \in G$라 하자.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$G$의 항등원 $e$는 유일하다.&lt;&#x2F;li&gt;
&lt;li&gt;$G$에서 소거법칙이 성립한다. 즉,
$$
\begin{aligned}
a \ b=a \ c \quad \Leftrightarrow \quad b=c \newline
b \ a=c \ a \quad \Leftrightarrow \quad b=c
\end{aligned}
$$&lt;&#x2F;li&gt;
&lt;li&gt;$G$의 각 원소 ($a \in G$)의 역원 $a^{-1} \in G$는 유일하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;thm-pf-uniqueness-of-identity-and-inverse-element&quot;&gt;(&lt;txtblu&gt;Thm-pf&lt;&#x2F;txtblu&gt;) Uniqueness of Identity and Inverse element&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-pf-uniqueness-of-identity-and-inverse-element&quot; aria-label=&quot;Anchor link for: thm-pf-uniqueness-of-identity-and-inverse-element&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;군의 정의에 따라 군 $G$는 적어도 하나의 항등원 $e$를 갖는다.
만약 $e, e&#x27;$가 각각 군 $G$의 항등원이라 가정하면,
$$
\begin{aligned}
e \ e&#x27; &amp;amp;= e&#x27; \ e = e \newline
e&#x27; \ e &amp;amp;= e \ e&#x27; = e&#x27; \newline
\end{aligned}
$$
두 식이 동일하므로, $e = e&#x27;$이다. 즉, 하나의 항등원만 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;군의 정의에 따라 원소 $a$는 역원 $a^{-1}$를 갖는다.
등식의 양 변에 역원을 곱해주면 쉽게 보일 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;원소 $a \in G$의 역원을 $d, d&#x27;$라 가정하자. 즉,
$$
da = e = d&#x27;a
$$
를 만족하고, &lt;code&gt;2.&lt;&#x2F;code&gt;에서 증명한 것처럼 양 변에 $a^{-1}$을 오른쪽에 곱하면 $d=d&#x27;$임을 보일 수 있다.
따라서 $a$의 역원은 하나만 존재한다. $\blacksquare$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;cor-inverse&quot;&gt;(&lt;txtylw&gt;Cor&lt;&#x2F;txtylw&gt;) Inverse&lt;a class=&quot;zola-anchor&quot; href=&quot;#cor-inverse&quot; aria-label=&quot;Anchor link for: cor-inverse&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;군 $G$에 대하여 $a, b \in G$이면&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$(ab)^{-1} = b^{-1}a^{-1}$&lt;&#x2F;li&gt;
&lt;li&gt;$(a^{-1})^{-1} = a$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;cor-pf-inverse&quot;&gt;(&lt;txtblu&gt;Cor-pf&lt;&#x2F;txtblu&gt;) Inverse&lt;a class=&quot;zola-anchor&quot; href=&quot;#cor-pf-inverse&quot; aria-label=&quot;Anchor link for: cor-pf-inverse&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;역원 관계에 있는 두 원소의 곱은 항등원이다.
$$
(ab) \cdot (b^{-1}a^{-1}) \ = \ a(bb^{-1}) a^{-1} \ = \ aea^{-1} \ = \ aa^{-1} \ = \ e
$$
마찬가지로
$$
(b^{-1}a^{-1}) \cdot (ab)  \ = \ b^{-1}eb \ = \ b^{-1}b \ = \ e
$$
따라서, $b^{-1}a^{-1}$이 $ab$의 역원이고 상기한 정리에 따라 &lt;txtred&gt;유일&lt;&#x2F;txtred&gt;하다.&lt;&#x2F;li&gt;
&lt;li&gt;$a$에 대한 역원으로 $a^{-1}$를 생각하면 아래 식이 성립한다.
$$
a \ a^{-1} = a^{-1} \ a = e
$$
또, $a^{-1}$에 대한 역원으로 $(a^{-1})^{-1}$을 생각하면 아래 식이 성립한다.
$$
a^{-1} \ (a^{-1})^{-1} = e
$$
따라서 식을 정리하면, $a^{-1} \ a = a^{-1} \ (a^{-1})^{-1}$이므로, 상기한 정리의 &lt;code&gt;2.&lt;&#x2F;code&gt; (소거 법칙)으로 증명할 수 있다.
$\blacksquare$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-law-of-exponents-in-group&quot;&gt;(&lt;txtred&gt;Thm&lt;&#x2F;txtred&gt;) Law of exponents in Group&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-law-of-exponents-in-group&quot; aria-label=&quot;Anchor link for: thm-law-of-exponents-in-group&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;군 $G$에 대하여 $a \in G$라 하자. 임의의 $m, n \in \mathbb{Z}$에 대하여
$$
a^m a^n = a^{m+n}, \quad (a^m)^n = a^{mn}
$$&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;원소의 위수&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-order-of-an-element&quot;&gt;(&lt;txtred&gt;Thm&lt;&#x2F;txtred&gt;) Order of an element&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-order-of-an-element&quot; aria-label=&quot;Anchor link for: thm-order-of-an-element&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;군 $G$에 대하여 $a \in G$일 때&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$a$가 무한위수를 가지면 $k \in \mathbb{Z}$인 모든 원소 $a^k$는 모두 다르다.&lt;&#x2F;li&gt;
&lt;li&gt;$i \neq j$에 대하여 $a^i = a^j$이면 $a$는 유한위수를 갖는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;thm-pf-order-of-an-element&quot;&gt;(&lt;txtblu&gt;Thm-pf&lt;&#x2F;txtblu&gt;) Order of an element&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-pf-order-of-an-element&quot; aria-label=&quot;Anchor link for: thm-pf-order-of-an-element&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;1.&lt;&#x2F;code&gt;, &lt;code&gt;2.&lt;&#x2F;code&gt;가 서로 대우 관계임에 주목하여 &lt;code&gt;2.&lt;&#x2F;code&gt;만 증명한다.
$i &amp;gt; j$에 대하여 $a^i = a^j$라 가정하면, 양 변에 $a^{-j}$ ($a^j$의 역원)을 곱해 다음을 구할 수 있다.
$$
a^{i-j} = a^{j-j} = a^0 = e
$$
이 때 $i - j &amp;gt; 0$ 이므로, $a$가 유한위수를 가짐을 알 수 있다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-finite-order-of-an-element&quot;&gt;(&lt;txtred&gt;Thm&lt;&#x2F;txtred&gt;) Finite order of an element&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-finite-order-of-an-element&quot; aria-label=&quot;Anchor link for: thm-finite-order-of-an-element&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;군 $G$에 대하여 $a \in G$가 유한위수 $n$을 갖는 원소라면,&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$a^k = e   \ \Leftrightarrow \ n | k$&lt;&#x2F;li&gt;
&lt;li&gt;$a^i = a^j \ \Leftrightarrow \ i \equiv j ( \bmod n)$&lt;&#x2F;li&gt;
&lt;li&gt;$d \ge 1, \ n = td \ \Rightarrow \ \textsf{ord}(a^t) = d$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;thm-pf-finite-order-of-an-element&quot;&gt;(&lt;txtblu&gt;Thm-pf&lt;&#x2F;txtblu&gt;) Finite order of an element&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-pf-finite-order-of-an-element&quot; aria-label=&quot;Anchor link for: thm-pf-finite-order-of-an-element&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;(&lt;txtylw&gt;$\Leftarrow$&lt;&#x2F;txtylw&gt;) $n|k \ \Leftrightarrow \ k = n \cdot t$이므로,
$$
a^k = a^{nt} = (a^n)^t = e^t = e
$$
(&lt;txtylw&gt;$\Rightarrow$&lt;&#x2F;txtylw&gt;) $a^k = e$ 일 때, 나눗셈 알고리즘에 따라 $k = n\cdot q + r$이고 $0 \le r &amp;lt; n$이다. 즉,
$$
e = a^k = a^{n \cdot q + r} = (a^n)^q \cdot a^r = e \cdot a^r = a^r
$$
이를 만족하는 $r$은 &lt;txtylw&gt;영&lt;&#x2F;txtylw&gt;밖에 없으므로($\because$ 위수(order)의 정의: $n$이 항등원이 되는 최소의 양의 정수),
$$
k = n\cdot q + 0 = nq
$$
따라서, $n | k$이다.&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;txtylw&gt;$\Leftrightarrow$&lt;&#x2F;txtylw&gt;) $a^i = a^j$이면 $a^{i-j} = e$이다. 즉, &lt;code&gt;1.&lt;&#x2F;code&gt;의 정리에 의해
$$
a^{i-j} = e \ \Leftrightarrow \ n | (i-j)
$$
약수는 곧 $(i-j) = n \cdot t$임을 의미하므로, $i \equiv j (\bmod n)$ 이다. $\newline$
필요충분조건임을 보이는 것은 어렵지 않다.&lt;&#x2F;li&gt;
&lt;li&gt;$|a| = n$이므로, $a^t$에 대하여 $(a^t)^d = a^{td} = a^n = e$를 만족하는 정수 $d$가 있음을 보여야 한다.  $\newline$
(&lt;txtylw&gt;&lt;em&gt;가정&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt;) $(a^t)^k = e$를 만족시키는 양의 정수 $k$를 가정하자. $\newline$
그러면 &lt;code&gt;1.&lt;&#x2F;code&gt;에 의해 $n | tk$이고, 정리하면 아래와 같다.
$$
t \ k = n \cdot \mathcal{r} = (td) \cdot \mathcal{r}
$$
따라서, $k=dr$이다. 다시 말해, $a^t$에 제곱승되는 $k$는 $d$를 약수로 가짐을 의미한다. $\newline$
정리 자체는 원소의 유한위수 $n$이 $n = td$로 인수분해 될 때, $a^t$의 위수가 정확히 $d$임을 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;cor-finite-order-of-an-element-in-abelian-group&quot;&gt;(&lt;txtylw&gt;Cor&lt;&#x2F;txtylw&gt;) Finite order of an element in Abelian group&lt;a class=&quot;zola-anchor&quot; href=&quot;#cor-finite-order-of-an-element-in-abelian-group&quot; aria-label=&quot;Anchor link for: cor-finite-order-of-an-element-in-abelian-group&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;군 $G$를 임의의 원소가 유한위수를 갖는 &lt;txtred&gt;&lt;strong&gt;Abelian Group&lt;&#x2F;strong&gt;&lt;&#x2F;txtred&gt;이라 하자.
$c \in G$가 $G$에서 &lt;txtgrn&gt;최대위수&lt;&#x2F;txtgrn&gt;를 갖는 원소(즉, 모든 $a \in G$에 대하여 $|a| \le |c|$)이면 $G$의 임의의 원소의 위수는 $|c|$의 약수이다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;cor-pf-finite-order-of-an-element-in-abelian-group&quot;&gt;(&lt;txtblu&gt;Cor-pf&lt;&#x2F;txtblu&gt;) Finite order of an element in Abelian group&lt;a class=&quot;zola-anchor&quot; href=&quot;#cor-pf-finite-order-of-an-element-in-abelian-group&quot; aria-label=&quot;Anchor link for: cor-pf-finite-order-of-an-element-in-abelian-group&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;(증명방법: &lt;txtylw&gt;&lt;strong&gt;모순에 의한 증명&lt;&#x2F;strong&gt;&lt;&#x2F;txtylw&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;임의의 $a \in G$가 $|a|\not{\mid} \ |c|$라고 가정해보자.
그러면 $|c|$의 소인수분해에서 나타나는 소수 $p$의 거듭제곱보다 더 큰 $p$의 거듭제곱이 정수 $|a|$의 소인수분해에서 나타나는 소수 $p$가 존재해야한다.
수식으로 쓰면 아래와 같다.
$$
\begin{aligned}
|a| &amp;amp;= p^r \cdot m \newline
|c| &amp;amp;= p^s \cdot n
\end{aligned}
$$
이 때 $m, n$은 $\gcd(p, m) = \gcd(p, n) = 1$인 값이고 $r &amp;gt; s$이다.&lt;&#x2F;p&gt;
&lt;p&gt;상기한 정리의 &lt;code&gt;3.&lt;&#x2F;code&gt;으로 부터 또 아래 두 사실을 알 수 있다.
$$
\begin{aligned}
\textsf{ord}(a^m)     &amp;amp;= p^r \newline
\textsf{ord}(c^{p^s}) &amp;amp;= n \newline
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;(&lt;txtylw&gt;&lt;em&gt;&lt;strong&gt;증명 필요&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt;) 위수가 서로소인 두 원소의 곱의 위수는 두 위수의 곱이므로,
$$
\textsf{ord}(a^m \cdot c^{p^s}) = p^r n
$$&lt;&#x2F;p&gt;
&lt;p&gt;따라서, $a^m \cdot c^{p^s} \in G$의 위수 &lt;txtgrn&gt;$p^r n$&lt;&#x2F;txtgrn&gt;이 $c$의 위수인 &lt;txtblu&gt;$p^s n$&lt;&#x2F;txtblu&gt;보다 크기 때문에($\because r &amp;gt; s$) $|c|$에 대한 가정에 모순이다 $\newline$
(&lt;txtred&gt;$\Rightarrow \Leftarrow$&lt;&#x2F;txtred&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;따라서, $|a| \mid |c|$ 이다. $\blacksquare$&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Modern Algebra (1-1)</title>
		<published>2025-06-01T00:00:00+00:00</published>
		<updated>2025-06-01T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/course-2025-modern-algebra-1-1/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/course-2025-modern-algebra-1-1/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;현대대수학 (추상대수학) Hungerford 3판의 내용 중 일부를 정리했습니다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;axiom-well-ordering&quot;&gt;&lt;txtylw&gt;(Axiom) Well-Ordering&lt;&#x2F;txtylw&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#axiom-well-ordering&quot; aria-label=&quot;Anchor link for: axiom-well-ordering&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;영 이상의 모든 정수 집합 ($\mathbb{Z}_{\ge 0}$)의 공집합이 아닌 임의의 부분집합은 항상 최소원소를 포함한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\mathbb{Z}$, $\mathbb{Q}$에서는 성립하지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-division-algorithm&quot;&gt;&lt;txtred&gt;(Thm)&lt;&#x2F;txtred&gt; Division Algorithm&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-division-algorithm&quot; aria-label=&quot;Anchor link for: thm-division-algorithm&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;정수 $a, b$에 대하여 $b &amp;gt; 0$ 일 때
$$
a = bq + r \quad 0 \le r &amp;lt; b
$$
를 만족하는 정수 $q, r$이 유일하게 존재한다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-pf-division-algorithm&quot;&gt;&lt;txtblu&gt;(Thm-pf)&lt;&#x2F;txtblu&gt; Division Algorithm&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-pf-division-algorithm&quot; aria-label=&quot;Anchor link for: thm-pf-division-algorithm&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;$a, b \in \mathbb{Z}$ 이고 $b &amp;gt; 0$ 이라 하자. 그리고 집합 $S$를 아래와 같이 가정한다.
$$
S = \lbrace a - bx: x \in \mathbb{Z}, a - bx \ge 0 \rbrace
$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtgrn&gt;Step 1. $S \neq \emptyset$ 임을 보인다.&lt;&#x2F;txtgrn&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$a + b |a| \ge 0$ 임을 보이면, $x = -|a|$일 때 $S$가 원소를 최소 하나 포함함을 보일 수 있다. $b$는 정수이므로 $b &amp;gt; 0$는 곧 $b \ge 1$을 의미한다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
b &amp;amp;\ge 1\newline
b|a| &amp;amp;\ge |a| \newline
b|a| &amp;amp;\ge -a \newline
a + b|a| &amp;amp;\ge 0
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtgrn&gt;Step 2. $a = bq + r$이고 $r \ge 0$ 을 만족하는 $q, r$을 구한다.&lt;&#x2F;txtgrn&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;txtylw&gt;Well-Ordering axiom&lt;&#x2F;txtylw&gt;에 의하여 $S$가 최소원소를 포함한다.&lt;&#x2F;p&gt;
&lt;p&gt;이 최소원소를 $r \in S$이라 하면, 임의의 $x$에 대하여 $a - bx = r$임을 알 수 있다. 이 때 $x=q$로 두면, 다음이 성립한다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
r = a - bq \text{ 이고 } r \ge 0 \quad \Leftrightarrow \quad a = bq + r \text{ 이고 } r \ge 0
$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtgrn&gt;Step 3. $r&amp;lt;b$ 를 증명한다.&lt;&#x2F;txtgrn&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;txtylw&gt;모순에 의한 증명&lt;&#x2F;txtylw&gt;으로 $r&amp;lt;b$를 보인다. 즉, $r \ge b$로 가정한 뒤 모순이 있음을 보임으로써 증명한다.&lt;&#x2F;p&gt;
&lt;p&gt;그럼 $r \ge b$ 이므로, $r-b \ge 0$이 성립한다. 이를 다시 정리하면&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
0 \le &amp;amp;r - b = (a - bq) - b = a - b(q+1) \newline
(\therefore) \quad &amp;amp;r-b \in S
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;즉, $S$의 원소 중 $r$보다 작은 원소인 $r-b$가 존재함을 의미한다.&lt;&#x2F;p&gt;
&lt;p&gt;그런데, &lt;txtgrn&gt;Step 2&lt;&#x2F;txtgrn&gt;에서 $r$이 $S$의 최소원소라고 하였으므로 이는 모순이다 ($\Rightarrow \Leftarrow$).&lt;&#x2F;p&gt;
&lt;p&gt;따라서, $r &amp;lt; b$ 이고 &lt;txtgrn&gt;Step 2&lt;&#x2F;txtgrn&gt;의 결론과 함께 정리하면 아래와 같다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
a = bq + r \text{ 이고 } 0 \le r &amp;lt; b
$$&lt;&#x2F;p&gt;
&lt;p&gt;분명히 위 식을 만족하는 정수 $q, r$이 존재한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtgrn&gt;Step 4. $q, r$의 유일성&lt;&#x2F;txtgrn&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;txtgrn&gt;Step 3&lt;&#x2F;txtgrn&gt;의 결과에 대해, $a = bq_1 + r_1 \text{ 이고 } 0 \le r_1 &amp;lt;b$ 인 정수 $q_1, r_1$을 가정하고 $q_1 = q$, $r_1 = r$임을 증명하자.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
a = bq + r &amp;amp;= bq_1 + r_1 \newline
b(q - q_1) &amp;amp;= r_1 - r \newline
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;그리고&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
0 \le r &amp;lt; b \newline
0 \le r_1 &amp;lt; b \newline
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;첫 번째 부등식에 $-1$을 곱한 뒤 두 부등식을 더하면&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
&amp;amp;b \le -r &amp;lt; 0 \newline
&amp;amp;0 \le r_1 &amp;lt; b \newline
\Rightarrow &amp;amp;-b &amp;lt; r_1 - r &amp;lt; b \newline
\Rightarrow &amp;amp;-b &amp;lt; b(q - q_1) &amp;lt; b \newline
\Rightarrow &amp;amp;-1 &amp;lt; q - q_1 &amp;lt; 1
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;따라서, $q - q_1 = 0$ 이므로 $q = q_1$이다. 손쉽게 $r = r_1$임을 알 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;그러므로, $q, r$은 유일하게 존재한다. $\blacksquare$&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Modern Algebra (1-2)</title>
		<published>2025-06-01T00:00:00+00:00</published>
		<updated>2025-06-01T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/course-2025-modern-algebra-1-2/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/course-2025-modern-algebra-1-2/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;현대대수학 (추상대수학) Hungerford 3판의 내용 중 일부를 정리했습니다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;def-divisibility&quot;&gt;(&lt;txtgrn&gt;Def&lt;&#x2F;txtgrn&gt;) Divisibility&lt;a class=&quot;zola-anchor&quot; href=&quot;#def-divisibility&quot; aria-label=&quot;Anchor link for: def-divisibility&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;정수 $a, b$에 대하여 $b \neq 0$이고 $a = bc$인 정수 $c$가 존재하면 $a$가 $b$로 &lt;txtred&gt;나누어진다&lt;&#x2F;txtred&gt;(divisible)고 하고,
$b$를 $a$의 약수(divisor) 또는 인수(factor)라 한다. 기호로 나타내면 $b | a$이다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;

&lt;blockquote class=&quot;callout note has-title&quot;&gt;
  
  
  &lt;p class=&quot;title&quot;&gt;
    &lt;span class=&quot;icon&quot;&gt;
      &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;18&quot; height=&quot;18&quot;&gt;&lt;path d=&quot;M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;

    &lt;&#x2F;span&gt;
    &lt;strong&gt;참고&lt;&#x2F;strong&gt;
  &lt;&#x2F;p&gt;
  &lt;div class=&quot;content&quot;&gt;
    &lt;p&gt;$a = bc$이고 $-a = b(-c)$이다. 즉, $a, -a$는 $b$를 공통 약수로 가짐을 알 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;조금 더 일반적으로 말하면, &lt;strong&gt;$a, -a$는 같은 약수를 갖는다.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;

  &lt;&#x2F;div&gt;
  
&lt;&#x2F;blockquote&gt;


&lt;blockquote class=&quot;callout note has-title&quot;&gt;
  
  
  &lt;p class=&quot;title&quot;&gt;
    &lt;span class=&quot;icon&quot;&gt;
      &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;18&quot; height=&quot;18&quot;&gt;&lt;path d=&quot;M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;

    &lt;&#x2F;span&gt;
    &lt;strong&gt;참고&lt;&#x2F;strong&gt;
  &lt;&#x2F;p&gt;
  &lt;div class=&quot;content&quot;&gt;
    &lt;p&gt;$b \neq 0$이고 $b|a$라 가정하자.&lt;&#x2F;p&gt;
&lt;p&gt;즉, $a = bc$ 이므로, $|a| = |b||c|$이고 $0 \le |b| \le |a|$이다.&lt;&#x2F;p&gt;
&lt;p&gt;이는 곧 $-|a|  \le b \le |a|$를 의미하고 아래 두 사실로 정리된다.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;영이 아닌 정수 $a$의 임의의 약수는 |a|와 같거나 작다.&lt;&#x2F;li&gt;
&lt;li&gt;영이 아닌 임의의 정수는 오직 유한 개의 약수를 갖는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;

  &lt;&#x2F;div&gt;
  
&lt;&#x2F;blockquote&gt;

&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;def-greatest-common-divisor&quot;&gt;(&lt;txtgrn&gt;Def&lt;&#x2F;txtgrn&gt;) Greatest Common Divisor&lt;a class=&quot;zola-anchor&quot; href=&quot;#def-greatest-common-divisor&quot; aria-label=&quot;Anchor link for: def-greatest-common-divisor&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;$a, b$를 적어도 하나는 $0$이 아닌 정수라 하자.&lt;&#x2F;p&gt;
&lt;p&gt;$a, b$가 모두 나누어지는 가장 큰 정수 $d$를 $a, b$의 &lt;txtred&gt;최대공약수&lt;&#x2F;txtred&gt;라 한다.&lt;&#x2F;p&gt;
&lt;p&gt;다르게 표현하면, $a,b$의 최대공약수 $d$는 다음 두 조건을 만족하는 정수이다.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;$d|a$ 이고 $d|b$이다.&lt;&#x2F;li&gt;
&lt;li&gt;$c|a$ 이고 $c|b$ 이면 $c \le d$이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;최대공약수 $d$는 $d = \gcd(a, b)$로 나타낸다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;최대공약수가 1인 두 수를 &lt;txtblu&gt;서로 소&lt;&#x2F;txtblu&gt;(relatively prime)라 부른다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-related-with-bezout-s-identity&quot;&gt;(&lt;txtred&gt;Thm&lt;&#x2F;txtred&gt;) (related with Bézout&#x27;s identity)&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-related-with-bezout-s-identity&quot; aria-label=&quot;Anchor link for: thm-related-with-bezout-s-identity&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;blockquote class=&quot;quote&quot;&gt;
  
  &lt;div class=&quot;icon&quot; style=&quot;display: none;&quot;&gt;&lt;svg fill=&quot;currentColor&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;  width=&quot;10&quot; height=&quot;10&quot; viewBox=&quot;796 698 200 200&quot;&gt;
&lt;g&gt;
	&lt;path d=&quot;M885.208,749.739v-40.948C836.019,708.791,796,748.81,796,798v89.209h89.208V798h-48.26
		C836.948,771.39,858.598,749.739,885.208,749.739z&quot;&#x2F;&gt;
	&lt;path d=&quot;M996,749.739v-40.948c-49.19,0-89.209,40.019-89.209,89.209v89.209H996V798h-48.26
		C947.74,771.39,969.39,749.739,996,749.739z&quot;&#x2F;&gt;
&lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
  &lt;div class=&quot;content&quot;&gt;&lt;p&gt;적어도 하나는 $0$이 아닌 정수 $a, b$의 최대공약수를 $d = \gcd(a,b)$라 하자.&lt;&#x2F;p&gt;
&lt;p&gt;$d = au + bv$를 만족하는 정수 $u, v$가 (유일하지는 않지만) 존재한다.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
  
&lt;&#x2F;blockquote&gt;
&lt;p&gt;우선 $a, b$의 일차 결합($ax + by$)의 집합 $S$를 아래와 같이 정의한다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
S = \lbrace as + bt \ | \ s, t \in \mathbb{Z} \rbrace
$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtgrn&gt;Step 1. $S$의 가장 작은 원소 $m$을 찾는다.&lt;&#x2F;txtgrn&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;txtylw&gt;Well-ordering axiom&lt;&#x2F;txtylw&gt;에 따르면, 공집합이 아닌 영 이상의 정수 집합의 부분집합은 항상 최소 원소를 갖는다.&lt;&#x2F;p&gt;
&lt;p&gt;$as + bt \in S$에 대하여 $s=a, t=b$를 대입하면 $a^2 + b^2 &amp;gt; 0$이다. 따라서 $S$는 항상 0 보다 큰 원소를 최소 하나 갖는다.
이 원소를 $m = au + bv$라 두자.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtgrn&gt;Step 2. $m$이 $\gcd(a, b)$임을 증명한다.&lt;&#x2F;txtgrn&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;정수 $m$이 최대공약수 $\gcd(a, b)$임을 증명하기 위해 정의의 다음 두 조건을 만족함을 보인다.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;$m|a$ 이고 $m|b$이다.&lt;&#x2F;li&gt;
&lt;li&gt;$c|a$ 이고 $c|b$ 이면 $c \le m$이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;txtblu&gt;첫 번째 조건&lt;&#x2F;txtblu&gt;은 우선 $m|a$임을 보인다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;course-2025-modern-algebra-1-1&#x2F;&quot;&gt;나눗셈 알고리즘&lt;&#x2F;a&gt;에 따라 아래와 같이 식을 정리할 수 있다. ($m &amp;gt; 0$)&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
a &amp;amp;= mq + r \quad  (0 \le r &amp;lt; m) \newline
r &amp;amp;= a - mq \newline
r &amp;amp;= a - (au+bv) q \newline
r &amp;amp;= a(\cdot) + b(\cdot)
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;따라서, 나머지인 $r$도 $S$의 원소임을 알 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;하지만, 나눗셈 알고리즘의 조건인 $(r &amp;lt; m)$으로 인해 $S$의 양수 중 최소값인 $m$보다 작아야 하고 그 범위가 $(0 \le r)$이므로 반드시 $r=0$이어야 함을 알 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;따라서, $a = mq \Leftrightarrow m | a$ 이다.&lt;&#x2F;p&gt;
&lt;p&gt;$b$에 대해서도 같은 방법으로 손쉽게 $m | b$ 임을 보일 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;txtblu&gt;두 번째 조건&lt;&#x2F;txtblu&gt;는 $c|a, \ c|b$에 이므로 두 값 $a, b$를 각각 $\begin{cases}a = ck \newline b = cs\end{cases}$로 두고 생각한다.&lt;&#x2F;p&gt;
&lt;p&gt;그렇다면 $m = au + bv = (ck)u + (cs)v = c(\cdot)$으로 정리할 수 있게 된다.&lt;&#x2F;p&gt;
&lt;p&gt;즉, $c | m$이므로 $c \le |m|$ 인데 $m &amp;gt; 0$이므로 $(\therefore) c \le m$이다.&lt;&#x2F;p&gt;
&lt;p&gt;위 두 조건 만족을 통해 $\gcd(a, b) = d$에 대하여 $d = au + bv$를 만족하는 $u, v$가 존재함($m$ 값이 존재함)을 알 수 있다. $\blacksquare$&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Modern Algebra. Appendix B</title>
		<published>2025-06-01T00:00:00+00:00</published>
		<updated>2025-06-01T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/course-2025-modern-algebra-appendix-b/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/course-2025-modern-algebra-appendix-b/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;현대대수학 (추상대수학) Hungerford 3판의 내용을 정리했습니다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;injective&quot;&gt;(&lt;txtred&gt;#&lt;&#x2F;txtred&gt;) Injective&lt;a class=&quot;zola-anchor&quot; href=&quot;#injective&quot; aria-label=&quot;Anchor link for: injective&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;txtblu&gt;단사&lt;&#x2F;txtblu&gt;(injective)는 쉽게 말해 &quot;일대일&quot;을 의미한다.&lt;&#x2F;p&gt;
&lt;p&gt;좀 더 정형화하면 어떤 사상 $f:B \rightarrow C$에 대하여, $a, b \in B \text{ 이고 } f(a), f(b) \in C$일 때,&lt;&#x2F;p&gt;
&lt;p&gt;$$
a \neq b \rightarrow f(a) \neq f(b)
$$&lt;&#x2F;p&gt;
&lt;p&gt;을 의미하는데, 이에 대한 대우를 생각해보면 아래와 같다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
f(a) = f(b) \rightarrow a = b
$$&lt;&#x2F;p&gt;
&lt;details &gt;
  &lt;summary&gt;&lt;span&gt;예제&lt;&#x2F;span&gt;&lt;&#x2F;summary&gt;
  &lt;blockquote&gt;
&lt;p&gt;예제 1)&lt;&#x2F;p&gt;
&lt;p&gt;$f: \mathbb{R} \rightarrow \mathbb{R}$ 이고, $f(x) = 4x + 7$일 때,
$$
\begin{aligned}
f(a) &amp;amp;= f(b) \newline
\Leftrightarrow (4a + 7) &amp;amp;= (4b + 7) \newline
a &amp;amp;= b
\end{aligned}
$$
따라서, 단사(&lt;em&gt;injective&lt;&#x2F;em&gt;) 이다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;예제 2)&lt;&#x2F;p&gt;
&lt;p&gt;$f: \mathbb{Z} \rightarrow \mathbb{Z}$ 이고, $f(x) = x^2$일 때,
$$
\begin{aligned}
f(3)  &amp;amp;= f(-3) = 9 \newline
\newline
\therefore f(3) = f(-3) &amp;amp;\not \rightarrow 3 = -3
\end{aligned}
$$
따라서, 단사(&lt;em&gt;injective&lt;&#x2F;em&gt;)가 아니다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;surjective&quot;&gt;(&lt;txtred&gt;#&lt;&#x2F;txtred&gt;) Surjective&lt;a class=&quot;zola-anchor&quot; href=&quot;#surjective&quot; aria-label=&quot;Anchor link for: surjective&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;txtblu&gt;전사&lt;&#x2F;txtblu&gt;(surjective)는 쉽게 말해 전부 커버가 되는지를 의미한다.&lt;&#x2F;p&gt;
&lt;p&gt;좀 더 정형화하면 임의의 사상 $f: B \rightarrow C$에 대하여, $\forall c \in C$가 적어도 하나의 $b \in B$에 대한 $f$의 상이 될 때를 의미한다.
즉,&lt;&#x2F;p&gt;
&lt;p&gt;$$
\exists \ b \in B : f(b) = c \ \text{ for } \forall c \in C
$$&lt;&#x2F;p&gt;
&lt;details &gt;
  &lt;summary&gt;&lt;span&gt;예제&lt;&#x2F;span&gt;&lt;&#x2F;summary&gt;
  &lt;blockquote&gt;
&lt;p&gt;예제 1)&lt;&#x2F;p&gt;
&lt;p&gt;자연수 $N = \mathbb{Z}_{\ge 0}$에 대하여, $f: \mathbb{Z} \rightarrow N$, $f(x) = |x|$ 를 살펴보자.&lt;&#x2F;p&gt;
&lt;p&gt;$\mathbb{N}$의 임의의 원소는 적어도 하나의 $\mathbb{Z}$의 원소의 $f$에 대한 상임을 쉽게 알 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;즉, $z \in \mathbb{Z}$ 가 $f$를 통해 대응되는 $\mathbb{N}$의 원소가 항상 존재하며 $z, -z$가 모두 하나의 $\mathbb{N}$의 원소($|z|$)에 대응된다.&lt;&#x2F;p&gt;
&lt;p&gt;따라서, 전사(&lt;em&gt;surjective&lt;&#x2F;em&gt;)이다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;&#x2F;details&gt;
&lt;p&gt;이제 전사의 필요충분조건을 살펴본다.&lt;&#x2F;p&gt;
&lt;p&gt;우선 &lt;txtylw&gt;치역&lt;&#x2F;txtylw&gt;은 다음과 같이 정의된다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\textsf{Im} f = \lbrace c | c = f(b) \text{ for } \forall b \in B \rbrace = \lbrace f(b) | b \in B \rbrace
$$&lt;&#x2F;p&gt;
&lt;p&gt;이를 이용해 임의의 사상 $f: B \rightarrow C$가 전사일 필요충분조건을 정리하면 아래와 같다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\textsf{Im} f = C
$$&lt;&#x2F;p&gt;
&lt;p&gt;즉, 공역(codomain)과 치역, 상이 모두 같은 경우를 의미한다고 볼 수 있다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;bijective&quot;&gt;(&lt;txtred&gt;#&lt;&#x2F;txtred&gt;) Bijective&lt;a class=&quot;zola-anchor&quot; href=&quot;#bijective&quot; aria-label=&quot;Anchor link for: bijective&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;txtblu&gt;전단사&lt;&#x2F;txtblu&gt;(&lt;em&gt;bijective&lt;&#x2F;em&gt;)는 함수 $f: B \rightarrow C$가 전사이면서 단사인 경우를 의미한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;유한집합 $B, C$에 대하여, $f$가 전단사일 &lt;txtylw&gt;필요충분조건&lt;&#x2F;txtylw&gt;은 $B, C$가 같은 원소의 개수를 가지는 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;$B$가 유한집합이고 $C \subsetneq B$ 이면, 전단사함수 $f$가 존재할 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$f$가 무한집합에서의 사상인 경우로 확장하여, 전단사 함수의 성질을 정리할 수 있다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;thm-bijective-function&quot;&gt;(&lt;txtred&gt;Thm&lt;&#x2F;txtred&gt;) Bijective function&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-bijective-function&quot; aria-label=&quot;Anchor link for: thm-bijective-function&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;blockquote class=&quot;quote&quot;&gt;
  
  &lt;div class=&quot;icon&quot; style=&quot;display: none;&quot;&gt;&lt;svg fill=&quot;currentColor&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;  width=&quot;10&quot; height=&quot;10&quot; viewBox=&quot;796 698 200 200&quot;&gt;
&lt;g&gt;
	&lt;path d=&quot;M885.208,749.739v-40.948C836.019,708.791,796,748.81,796,798v89.209h89.208V798h-48.26
		C836.948,771.39,858.598,749.739,885.208,749.739z&quot;&#x2F;&gt;
	&lt;path d=&quot;M996,749.739v-40.948c-49.19,0-89.209,40.019-89.209,89.209v89.209H996V798h-48.26
		C947.74,771.39,969.39,749.739,996,749.739z&quot;&#x2F;&gt;
&lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
  &lt;div class=&quot;content&quot;&gt;&lt;p&gt;함수 $f: B \rightarrow C$가 전단사일 필요충분조건은 다음과 같다.&lt;&#x2F;p&gt;
&lt;p&gt;$g \ \circ \ f = \iota_B \text{ 이고 } f \ \circ \ g = \iota_C$인 함수 $g: C \rightarrow B$가 존재한다.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
  
&lt;&#x2F;blockquote&gt;&lt;h1 id=&quot;thm-pf-bijective-function&quot;&gt;(&lt;txtblu&gt;Thm-pf&lt;&#x2F;txtblu&gt;) Bijective function&lt;a class=&quot;zola-anchor&quot; href=&quot;#thm-pf-bijective-function&quot; aria-label=&quot;Anchor link for: thm-pf-bijective-function&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;필요충분조건에 대한 증명이므로 두 과정을 통해 증명을 진행한다.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-rightarrow&quot;&gt;1) $\Rightarrow$&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-rightarrow&quot; aria-label=&quot;Anchor link for: 1-rightarrow&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;txtylw&gt;목표&lt;&#x2F;txtylw&gt;: $f$가 전단사이면, 위 조건을 만족하는 함수 $g$가 존재한다는 것을 보인다.&lt;&#x2F;p&gt;
&lt;p&gt;먼저 $f$가 &lt;em&gt;bijective&lt;&#x2F;em&gt;라 가정한다. 그렇다면,&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;전사이므로 $\exists \ b : f(b) = c \ \text{ for } \ \forall c \in C$ 이고,&lt;&#x2F;li&gt;
&lt;li&gt;단사이므로 $\exists ! \ b : f(b) = c$ ($b$가 &lt;em&gt;유일하게 존재함!&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;그러므로 $g(c) = b$인 함수를 (자연스럽게) 정의할 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;임의의 $c \in C$에 대하여 두 함수를 합성하여 아래와 같이 정리할 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
(f \circ g)(c) = f(g(c)) = f(b) = c
$$&lt;&#x2F;p&gt;
&lt;p&gt;따라서, $f \circ g = \iota_B$이다.&lt;&#x2F;p&gt;
&lt;p&gt;유사한 방법으로&lt;&#x2F;p&gt;
&lt;p&gt;$$
(g \circ f)(b) = g(f(b)) = g(c) = b
$$&lt;&#x2F;p&gt;
&lt;p&gt;따라서, $g \circ b = \iota_B$이다.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-leftarrow&quot;&gt;2) $\Leftarrow$&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-leftarrow&quot; aria-label=&quot;Anchor link for: 2-leftarrow&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;txtylw&gt;목표&lt;&#x2F;txtylw&gt;: 위 조건을 만족하는 $g: C \rightarrow B$가 존재하면, 함수 $f: B \rightarrow C$는 전단사임을 보인다.&lt;&#x2F;p&gt;
&lt;p&gt;함수 $g: C \rightarrow B$가 존재하고, $f$에 대하여 $f(a) = f(b)$라 가정하자.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
f(a) &amp;amp;= f(b) \newline
g(f(a)) &amp;amp;= g(f(b)) \newline
\iota_B(a) &amp;amp;= \iota_B(b) \newline
a &amp;amp;= b \newline
\therefore f(a) = f(b) &amp;amp;\rightarrow a = b
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;이를 통해 $f$가 &lt;txtblu&gt;단사&lt;&#x2F;txtblu&gt;(&lt;em&gt;injective&lt;&#x2F;em&gt;)임을 보인다.&lt;&#x2F;p&gt;
&lt;p&gt;또, 임의의 $c \in C$에 대하여, $g(c) \in B$임을 이용하여&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
f(g(c)) = (f \circ g)(c) = \iota_C(c) = c\in C
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;임을 알 수 있다. 즉, $f$가 $C$에 사상하는 임의의 원소 ($g(c)$)가 존재함을 확인할 수 있다.
따라서, $f$는 &lt;txtblu&gt;전사&lt;&#x2F;txtblu&gt;(&lt;em&gt;surjective&lt;&#x2F;em&gt;)이다.&lt;&#x2F;p&gt;
&lt;p&gt;그러므로, $f$는 &lt;strong&gt;&lt;txtblu&gt;전단사&lt;&#x2F;txtblu&gt;&lt;&#x2F;strong&gt;(&lt;em&gt;&lt;strong&gt;bijective&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;)이다. $\blacksquare$&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Paper Review: A Family of Optimal Locally Recoverable Codes</title>
		<published>2025-05-26T00:00:00+00:00</published>
		<updated>2025-05-26T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/paper-review-a-family-of-optimal-locally-recoverable-codes/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/paper-review-a-family-of-optimal-locally-recoverable-codes/</id>
		<content type="html">&lt;h1 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-introduction&quot; aria-label=&quot;Anchor link for: 1-introduction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;2-preliminaries-of-lrc-codes&quot;&gt;2. Preliminaries of LRC Codes&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-preliminaries-of-lrc-codes&quot; aria-label=&quot;Anchor link for: 2-preliminaries-of-lrc-codes&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;pushpin-definition&quot;&gt;📌 Definition&lt;a class=&quot;zola-anchor&quot; href=&quot;#pushpin-definition&quot; aria-label=&quot;Anchor link for: pushpin-definition&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;어떤 코드 $\mathcal{C} \in \mathbb{F}^n_q$가 &lt;span style=&quot;color: tomato&quot;&gt;&lt;em&gt;locality&lt;&#x2F;em&gt;&lt;&#x2F;span&gt; $r$ 을 갖는다는 것의 의미는,
코드워드의 모든 심볼 $\forall x \in \mathcal{C}$이 $r$개의 서로 다른 심볼들로 이루어진 &lt;span style=&quot;color: skyblue&quot;&gt;부분집합&lt;&#x2F;span&gt;을 통해 복원될 수 있음을 의미한다.
(다시 말해, $r$개의 서로 다른 심볼 $x_{i_1}, x_{i_2}, \dots, x_{i_r}$에 대한 함수 $f: (x_{i_1}, x_{i_2}, \dots, x_{i_r}) \rightarrow x$가 존재함을 의미한다.)&lt;&#x2F;p&gt;
&lt;p&gt;좀 더 자세히 얘기하자면, $i$번째에 위치하는 코드워드의 심볼 $x_i$에 대하여, 아래 조건을 만족하는 &lt;span style=&quot;color: skyblue&quot;&gt;부분집합&lt;&#x2F;span&gt; $I_i$ 가 존재한다고 가정하자.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
I_i &amp;amp;\in [n] \backslash i \newline
|I_i| &amp;amp;\le r
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;이 때, 코드 $\mathcal{C}$를 $I_i$의 위치로만 제한하면, $x_i$ 의 값을 복원할 수 있다.
이러한 &lt;span style=&quot;color: skyblue&quot;&gt;부분집합&lt;&#x2F;span&gt; $I_i$를 &lt;span style=&quot;color: skyblue&quot;&gt;&lt;em&gt;recovering set&lt;&#x2F;em&gt;&lt;&#x2F;span&gt;이라 한다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;LRC&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;에 대한 보다 형식적인 정의는 다음과 같다.
임의의 필드 위 원소 $a \in \mathbb{F}_q$에 대하여 다음의 코드워드 집합을 가정한다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
C(i, a) = \lbrace x \in \mathcal{C}: x_i = a \rbrace, \quad i \in [n]
$$&lt;&#x2F;p&gt;
&lt;p&gt;$C(i, a)$는 코드 $\mathcal{C}$에 속하는 임의의 코드워드 $x$들 중, 임의의 위치 $i$에 대한 심볼 값이 $x_i = a$로 동일한 코드워드들의 집합을 의미한다.&lt;&#x2F;p&gt;
&lt;p&gt;만약 모든 $i \in [n]$에 대하여 앞서 살펴본 &lt;span style=&quot;color: skyblue&quot;&gt;부분집합&lt;&#x2F;span&gt; $I_i$가 존재한다고 해보자.
$I_i$가 있다는 것은, $x_i$를 복원할 때 필요한 $r$개의 서로 다른 심볼들의 위치가 존재함을 의미한다.&lt;&#x2F;p&gt;
&lt;p&gt;$I_i$로 인덱스를 제한한 코드워드들이 &lt;span style=&quot;color: gold&quot;&gt;&lt;em&gt;다른 집합&lt;&#x2F;em&gt;&lt;&#x2F;span&gt; $\mathcal{C}(i, a&#x27;)$과 겹치는 부분이 없을 때(disjoint),
코드 $\mathcal{C}$는 &lt;span style=&quot;color: tomato&quot;&gt;&lt;em&gt;locality&lt;&#x2F;em&gt;&lt;&#x2F;span&gt; $r$ 을 갖는다고 할 수 있다. 즉, 아래 식을 만족함을 의미한다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
C_{I_i}(i, a) \medspace \cap \medspace C_{I_i}(i, a&#x27;) = \text{\O}, \quad a \neq a&#x27;
$$&lt;&#x2F;p&gt;
&lt;p&gt;결과적으로, 코드 $\mathcal{C}_{I_i \cup \lbrace i \rbrace}$를 코드 $\mathcal{C}$의 &lt;span style=&quot;color: tomato&quot;&gt;&lt;em&gt;&lt;strong&gt;local code&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;span&gt;라 부른다.
LRC 코드의 구성에서는 $(n, k, r)$ LRC 코드가 보통 $(r+1, r)$의 &lt;span style=&quot;color: gold&quot;&gt;&lt;em&gt;로컬 MDS 코드&lt;&#x2F;em&gt;&lt;&#x2F;span&gt;로 나뉘어서 심볼의 &lt;span style=&quot;color: skyblue&quot;&gt;&lt;em&gt;recovering set&lt;&#x2F;em&gt;&lt;&#x2F;span&gt; 역할을 한다.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pushpin-properties&quot;&gt;📌 Properties&lt;a class=&quot;zola-anchor&quot; href=&quot;#pushpin-properties&quot; aria-label=&quot;Anchor link for: pushpin-properties&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;LRC 코드의 성질은 크게 두 가지로, &lt;em&gt;minimum distance&lt;&#x2F;em&gt;와 &lt;em&gt;rate&lt;&#x2F;em&gt;의 bound에 관한 것이다.&lt;&#x2F;p&gt;
&lt;p&gt;LRC 코드 $\mathcal{C}$의 &lt;span style=&quot;color: tomato&quot;&gt;rate&lt;&#x2F;span&gt; 는 아래의 upper bound를 갖는다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\frac{k}{n} \le \frac{r}{r+1}
$$&lt;&#x2F;p&gt;
&lt;p&gt;그리고 $\mathcal{C}$의 &lt;span style=&quot;color: tomato&quot;&gt;minimum distance&lt;&#x2F;span&gt;는 아래의 upper bound를 갖는다.&lt;&#x2F;p&gt;
&lt;p&gt;$$
d \le n - k - \lceil\frac{k}{r}\rceil + 2
$$&lt;&#x2F;p&gt;
&lt;p&gt;그리고, &lt;span style=&quot;color: tomato&quot;&gt;distance&lt;&#x2F;span&gt;에서 $d = n - k - \lceil\frac{k}{r}\rceil + 2$를 만족하는 코드가 &lt;span style=&quot;color: gold&quot;&gt;&lt;em&gt;Optimal LRC code&lt;&#x2F;em&gt;&lt;&#x2F;span&gt; 이다.&lt;&#x2F;p&gt;
&lt;p&gt;기본적으로 &lt;code&gt;(n, k) linear code&lt;&#x2F;code&gt; 이므로, $k$ 개의 심볼로 어느 코드워드 심볼이든 복구 할 수 있음이 명확하다.
따라서, 자연스레 $r = k$를 만족하고 $1 \le r \le k$ 범위로 &lt;span style=&quot;color: tomato&quot;&gt;&lt;em&gt;locality&lt;&#x2F;em&gt;&lt;&#x2F;span&gt;를 가짐을 알 수 있다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$r=k$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;만약 $r=k$인 경우를 생각해보면, &lt;span style=&quot;color: tomato&quot;&gt;distance&lt;&#x2F;span&gt;는 아래와 같이 계산된다.
$$
\begin{aligned}
d &amp;amp;\le n - k - \lceil\frac{k}{k}\rceil + 2 \newline
\therefore d &amp;amp;\le n - k + 1
\end{aligned}
$$
따라서, RS코드와 같은 MDS코드의 distance 로 귀결됨을 알 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;$r=1$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;반면에 $r=1$인 경우를 생각해보면, &lt;span style=&quot;color: tomato&quot;&gt;distance&lt;&#x2F;span&gt;가 아래와 같이 계산된다.
$$
\begin{aligned}
d &amp;amp;\le n - k - \lceil\frac{k}{1}\rceil +2 \newline
\therefore d &amp;amp;\le 2 \lparen \frac{n}{2} - k + 1 \rparen
\end{aligned}
$$
따라서, $(n&#x2F;2, k)$ MDS 코드의 심볼을 두 배로 복제한 코드워드와 같음을 알 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;3-code-construction&quot;&gt;3. Code Construction&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-code-construction&quot; aria-label=&quot;Anchor link for: 3-code-construction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;이 장에서는 &lt;span style=&quot;color: tomato&quot;&gt;&lt;em&gt;&lt;strong&gt;optimal linear $(n, k, r)$ LRC code&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;span&gt;을 구성한다.
코드는 유한체 $\mathbb{F}_q$ 상에서 정의되며, $q$는 소수의 거듭제곱 또는 $n$이다.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-1-general-construction&quot;&gt;3.1 General Construction&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-1-general-construction&quot; aria-label=&quot;Anchor link for: 3-1-general-construction&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Keyboard review: 3 years with Happy Hacking</title>
		<published>2025-05-23T00:00:00+00:00</published>
		<updated>2025-05-23T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/life-2025-05-23/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/life-2025-05-23/</id>
		<content type="html">&lt;p&gt;그냥 생각나서 적어둔다.&lt;&#x2F;p&gt;
&lt;p&gt;대학교 1학년 때인가. 동아리 선배가 지나가는 말로 &quot;&lt;em&gt;해피해킹 키보드&lt;&#x2F;em&gt;&quot;를 언급한 것이 기억에 새겨졌다.&lt;&#x2F;p&gt;
&lt;p&gt;이유는 잘 모르겠다. 그냥 정보보안 동아리였어서 &#x27;해킹&#x27;이라는 단어에 꽂힌 것 같다. (사실 키보드 모델명의 &#x27;해킹&#x27;은 내가 알던 것과는 좀 다른 의미로 사용되는 것 같다)&lt;&#x2F;p&gt;
&lt;p&gt;전역을 하고, 우연한 기회로 서울에서 실컷 코딩할 기회가 있어서 거의 평생 쓸 요량으로 &lt;span style=&quot;color: gold&quot;&gt;해피해킹 프로2 Type-S 화이트 버전&lt;&#x2F;span&gt;을 당근으로 구했다 (20만원 정도)&lt;&#x2F;p&gt;
&lt;p&gt;사실 해피해킹 후기를 검색하면 한 번쯤은 보았을 &quot;며칠 쓰고 포기함&quot; 같은 글 때문에 &#x27;별로 안 좋은 키보드인가?&#x27; 하는 생각도 있었지만, 결론부터 말하자면 나는 &lt;strong&gt;대만족&lt;&#x2F;strong&gt;하고 3년째 주기적으로 청소해가며 쓰고 있다.&lt;&#x2F;p&gt;
&lt;p&gt;내가 생각하는 이 키보드의 장점은 다음과 같다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;작고 예쁘다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;일단 작다. 키보드 크기가 작다는건 책상 위 공간을 많이 차지하지 않기에 여유 공간이 많아진다는 장점도 있지만, 더 좋은 장점은 손을 많이 움직일 필요가 없다는 점이다. 대부분의 사람들은 [asdf], [jkl;] 에 왼손과 오른손의 검지부터 소지까지를 올려놓고 키보드를 이용할 것이다. PageDown, Delete, NumPad, 펑션 키 등이 붙어있는 거대한 키보드를 사용할 때보다 손 움직임이 덜하니 편리하게 느껴졌다. 그리고 사실 내가 사용하는 모델은 무각이다. 어차피 타이핑 할 때 일일이 글자를 보는 것도 아니고, 개인적으로는 깔끔하게 지워져있는 편이 훨씬 보기에 좋은 것 같다.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;키감이 좋다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;혹자는 이렇게 작고 뭔가 부실해보이는 키보드가 뭐 그리 비싸느냐고 할 수 있지만, 비싼 키보드 세계를 해피해킹으로 입문한 나도 체감 될 정도로 이 키보드는 키감이 좋다. 보통 &#x27;도각도각&#x27; 으로 표현하는 초콜릿 부수는 느낌도 청소 직후에 좀 나는 것 같다 (당근을 해서 그런가....). 무엇보다도 , 저소음 적축, 적축 등 다른 키보드들을 눌러보았을 때보다 이 무접점 키보드가 주는 느낌이 압도적으로 좋았다.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;VIM 사용자에게는 아주 적합한 키보드다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;나는 vim 을 사용한다. &lt;span style=&quot;color: skyblue&quot;&gt;&lt;em&gt;&lt;strong&gt;Alacritty + Tmux + Lunarvim&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;span&gt; 이렇게 세 조합을 어느 컴퓨터 환경이 주어지더라도 우선 세팅하고 시작한다. 몇 번이고 vscode나 cursor 등 다른 IDE 환경으로 바꿔보려고 시도하기도 했었다. 하지만... Tmux 의 화면 분할, 이동, 창 크기 조절 등의 기능과 LunarVim 에 내장된 telescope 등으로 빠르게 프로젝트를 파악하고 코딩하는 등의 익숙한 흐름을 포기하기가 쉽지 않았다. 사실, 그냥 키보드에서 손을 떼고 마우스를 잡았다가 다시 키보드로 오는 그 동작이 굉장히 어색했다.&lt;&#x2F;p&gt;
&lt;p&gt;그래서 작고 예쁜데 VIM 사용자인 나에게 아주 적합한 키보드라 고장나지 않는 이상 계속 사용할 것 같다.&lt;&#x2F;p&gt;
&lt;p&gt;여유가 된다면, 블루투스 모델도 좋다고 들어서 한번 사보고 싶다.&lt;&#x2F;p&gt;
&lt;p&gt;유일한 단점은 키캡놀이가 아닐까...&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>(1) Reed-solomon Fingerprinting</title>
		<published>2025-05-23T00:00:00+00:00</published>
		<updated>2025-05-23T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/pazk-1/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/pazk-1/</id>
		<content type="html">&lt;h1 id=&quot;2-1-reed-solomon-fingerprinting&quot;&gt;2.1 Reed-Solomon Fingerprinting&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-1-reed-solomon-fingerprinting&quot; aria-label=&quot;Anchor link for: 2-1-reed-solomon-fingerprinting&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;증명 시스템을 본격적으로 다루기에 앞서, &lt;code&gt;무작위성(randomness)&lt;&#x2F;code&gt;이 어떻게 특정 알고리즘의 효율을 극대화시킬 수 있는지를 살펴본다. 여기서 다루는 증명 과정의 참여자들은 모두 신뢰할만하고, 계산 능력도 충분하다고 가정한다. 즉, 아래 사항을 전제로 한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Alice&lt;&#x2F;em&gt;, &lt;em&gt;Bob&lt;&#x2F;em&gt; 이 서로를 신뢰(trust)한다.&lt;&#x2F;li&gt;
&lt;li&gt;특정한 연산 $f$ 을 수행할 충분한 능력이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-1-1-setting&quot;&gt;2.1.1 Setting&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-1-1-setting&quot; aria-label=&quot;Anchor link for: 2-1-1-setting&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Alice&lt;&#x2F;code&gt; 와 &lt;code&gt;Bob&lt;&#x2F;code&gt;이 서로 멀리 떨어져 지낸다고 가정해본다. 그들 각각은 $n$ 개의 글자로 이뤄진 &lt;strong&gt;크기가 큰 파일&lt;&#x2F;strong&gt;을 가지고 있다. 각 글자를 ASCII 코드로 생각하면 총 $m=128$ 가지의 글자가 올 수 있다.
&lt;code&gt;Alice&lt;&#x2F;code&gt; 와 &lt;code&gt;Bob&lt;&#x2F;code&gt;의 파일을 각각 아래와 같이 나타내면,
$$
\begin{cases}(a_1, a_2, \cdots, a_n) \ (b_1, b_2, \cdots, b_n)\end{cases}
$$
이들의 &lt;font color=&quot;tomato&quot;&gt;목표&lt;&#x2F;font&gt;는 다음과 같다.
$$
\text{Pr}[a_i = b_i: \forall i \in [n]] = 1
$$
파일의 크기가 크기 때문에, 이들의 실제 목표는 &lt;em&gt;통신 비용 (communication cost)&lt;&#x2F;em&gt; 을 최대한 낮추는 것이 된다.
&lt;font color=&quot;tomato&quot;&gt;목표&lt;&#x2F;font&gt;를 달성하는 가장 직관적인 방법은 &lt;code&gt;Alice&lt;&#x2F;code&gt; 가 모든 파일을 &lt;code&gt;Bob&lt;&#x2F;code&gt;에게 넘기는 것이다. 하지만, 파일의 크기가 너무 크기 때문에 이러한 전송은 현실적이지 않다. 1997년에 작성된 Eyal Kushilevitz와 Noam Nisan 의 논문 &lt;em&gt;&lt;strong&gt;Communication Complexity&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; 에서는 이런 직관적인 방법보다 더 낮은 정보를 전송하는 &lt;em&gt;deterministic&lt;&#x2F;em&gt; procedure는 없음을 증명하기도 했다. (즉, 파일을 그대로 주는게 결정론적 절차에서는 가장 효율적임을 의미한다.)
하지만, &lt;code&gt;Alice&lt;&#x2F;code&gt;와 &lt;code&gt;Bob&lt;&#x2F;code&gt;이 아주 작은 확률로 오답을 내놓는 &lt;em&gt;randomized&lt;&#x2F;em&gt; procedure 를 수행할 수 있다고 가정할 때, 훨씬 적은 communication 으로 &lt;font color=&quot;tomato&quot;&gt;목표&lt;&#x2F;font&gt;를 달성할 수 있음을 확인할 수 있다.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-1-2-communication-protocol&quot;&gt;2.1.2 Communication Protocol&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-1-2-communication-protocol&quot; aria-label=&quot;Anchor link for: 2-1-2-communication-protocol&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;high-level-idea&quot;&gt;High-Level Idea&lt;a class=&quot;zola-anchor&quot; href=&quot;#high-level-idea&quot; aria-label=&quot;Anchor link for: high-level-idea&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;개략적인 아이디어는 &lt;code&gt;Alice&lt;&#x2F;code&gt;가 아래 두 값을 주는 것이다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;(small) family of hash functions $\mathcal{H}(\cdot)$ (특정한 구조나 성질을 만족하는 해시 함수들의 집합 정도로 이해할 수 있다)&lt;&#x2F;li&gt;
&lt;li&gt;파일 $\textbf{a}=(a_1, a_2, \dots, a_n)$ 에 대한 해시값 $h(\textbf{a}) \text{ where } h \in \mathcal{H}$
이 때, 해시값 $\mathcal{H}(\textbf{a})$ 를 일종의 &lt;span style=&quot;color: tomato&quot;&gt;&lt;em&gt;&lt;strong&gt;Fingerprint&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;span&gt; 로 생각할 수 있다. 만약 서로 다른 $x, y$ 에 대해 아래 식이 성립한다면, 우리는 &lt;em&gt;&lt;strong&gt;Fingerprint&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; 를 특정 데이터에 대한 &quot;거의 고유한 식별자&quot;로 활용할 수 있게 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$$
\forall x \neq y, \underset{h \in \mathcal{H}}{\text{Pr}}[h(x) = h(y)] \le \epsilon
$$
따라서, &lt;code&gt;Alice&lt;&#x2F;code&gt;가 $\textbf{a}, h(\textbf{a})$ 를 전송하면 &lt;code&gt;Bob&lt;&#x2F;code&gt;은 $h(a) \overset{?}{=} h(b)$ 를 진행한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$h(a) \neq h(b)$ 이면, &lt;code&gt;Bob&lt;&#x2F;code&gt;은 $a \neq b$ 임을 알게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;$h(a) = h(b)$ 이면, &lt;code&gt;Bob&lt;&#x2F;code&gt;은 $a=b$ 임을 &lt;strong&gt;높은 확률로 확신&lt;&#x2F;strong&gt;할 수 있게 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;details&quot;&gt;Details&lt;a class=&quot;zola-anchor&quot; href=&quot;#details&quot; aria-label=&quot;Anchor link for: details&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;위 아이디어를 더 구체적으로 만들기 위해 소수 $p \ge \max{m, n^2}$ 와 $\mathbb{F}_p$ 를 정한다.
소수 $p$ 의 lower-bound에 대해서 아래와 같이 설명할 수 있다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$p \ge n^2$ 인 이유&lt;&#x2F;p&gt;
&lt;p&gt;우선 &lt;span style=&quot;color: red&quot;&gt;에러&lt;&#x2F;span&gt;가 발생하는 경우는, 서로 다른 데이터 $a, b$ 에 대해 같은 해시 값이 나오는 경우이다. 즉, 아래와 같이 확률을 계산할 수 있다.
$$
\text{Pr}[h(a) = h(b), \text{ where } a \neq b] = \frac{1}{p}
$$
이 때, 각 데이터가 길이 $n$인 벡터이므로 &lt;span style=&quot;color: skyblue&quot;&gt;데이터가 서로 다르다&lt;&#x2F;span&gt;라는 의미는 최대 $n$ 개의 character가 다르다는 의미와 같다. 즉, 아래와 같이 기술할 수 있다.
$$
\text{Pr}[h(a) = h(b), \text{ where } a \neq b, |a| = |b| = n] \le \frac{n}{p}
$$
?????&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Simple ZK Static Program Analysis</title>
		<published>2024-08-16T00:00:00+00:00</published>
		<updated>2024-08-16T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/pse-2024-mini-project/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/pse-2024-mini-project/</id>
		<content type="html">&lt;h1 id=&quot;deuleogamyeo&quot;&gt;들어가며&lt;a class=&quot;zola-anchor&quot; href=&quot;#deuleogamyeo&quot; aria-label=&quot;Anchor link for: deuleogamyeo&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;8월 16일 금요일의 PSE Core Program off-line meet 시간에는 &lt;em&gt;ZKP&lt;&#x2F;em&gt; 를 활용한 미니 해커톤이 진행되었다.
나는 Orion 논문을 읽다가 발견했던 흥미로운 주제인 &lt;em&gt;ZK Static Program Analysis&lt;&#x2F;em&gt; 로 미니 해커톤에 참가했다. 결과물로 구현하고자 하는 것은 아래와 같다.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;임의의 Rust 프로그램 소스코드에 &lt;code&gt;division by zero&lt;&#x2F;code&gt;를 일으킬 수 있는 코드가 없음을 ZKP로 증명&lt;&#x2F;em&gt; 하는 프로그램&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;ZKP 프로젝트인만큼 원본 소스코드에 관해서는 &lt;strong&gt;zero-knowledge&lt;&#x2F;strong&gt;인 것이 특징이다.
&lt;em&gt;안전한 소스코드&lt;&#x2F;em&gt; 임을 직접 제출할 필요 없이도 증명할 수 있는 것이다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Parser&lt;&#x2F;code&gt;와 &lt;code&gt;Circuit&lt;&#x2F;code&gt;은 아래와 같이 설게 및 구현되었다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Parser&lt;&#x2F;strong&gt;: Rust 코드를 분석해 Circuit의 입력값으로 변환하는 단계&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Circuit&lt;&#x2F;strong&gt;: 분석된 Rust코드를 통해 &lt;strong&gt;정적 분석&lt;&#x2F;strong&gt;을 수행하는 단계&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;구현물은 https:&#x2F;&#x2F;github.com&#x2F;c0np4nn4&#x2F;simple_zk_spa 에서 확인할 수 있다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;guhyeon-sangse&quot;&gt;구현 상세&lt;a class=&quot;zola-anchor&quot; href=&quot;#guhyeon-sangse&quot; aria-label=&quot;Anchor link for: guhyeon-sangse&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;1-parser&quot;&gt;1. Parser&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-parser&quot; aria-label=&quot;Anchor link for: 1-parser&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Parser&lt;&#x2F;strong&gt;는 Rust 문법으로 작성된 소스코드를 읽고 각 줄을 분석하여 아래 형태의 배열로 변환한다.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;원소 1&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;원소 2&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;원소 3&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;원소 4&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;Op Type&lt;&#x2F;code&gt;&lt;br&gt;명령어 종류&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;lhs elem&lt;&#x2F;code&gt;&lt;br&gt;좌항 원소&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;rhs elem 1&lt;&#x2F;code&gt;&lt;br&gt;우항 원소 1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;rhs elem 2&lt;&#x2F;code&gt;&lt;br&gt;우항 원소 2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;아주 간단한 형태의 &lt;code&gt;예시 프로그램&lt;&#x2F;code&gt; 사용을 가정했기에 분석기도 매우 간결하게 구현하였다.
명령어의 종류는 아래와 같이 총 4개로만 설계했다.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;명령어 번호&lt;&#x2F;th&gt;&lt;th&gt;명령어 종류&lt;&#x2F;th&gt;&lt;th&gt;명령어 설명&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;0&lt;&#x2F;td&gt;&lt;td&gt;NoOp&lt;&#x2F;td&gt;&lt;td&gt;프로그램 종료를 의미하는 동작 코드 &lt;br&gt;모든 배열의 원소가 $0$ (&lt;code&gt;[0, 0, 0, 0]&lt;&#x2F;code&gt;)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;1&lt;&#x2F;td&gt;&lt;td&gt;Assign&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;좌항 원소&lt;&#x2F;code&gt;에 &lt;code&gt;우항 원소 1&lt;&#x2F;code&gt;을 저장 &lt;br&gt;이 때, &lt;code&gt;우항 원소 2&lt;&#x2F;code&gt;는 무조건 $0$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Addition&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;좌항 원소&lt;&#x2F;code&gt;에 &lt;code&gt;우항 원소 1&lt;&#x2F;code&gt;과 &lt;code&gt;우항 원소 2&lt;&#x2F;code&gt;의 덧셈 결과를 저장&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Division&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;좌항 원소&lt;&#x2F;code&gt;에 &lt;code&gt;우항 원소 1&lt;&#x2F;code&gt;과 &lt;code&gt;우항 원소 2&lt;&#x2F;code&gt;의 나눗셈 결과를 저장&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;또, 변수(variable)와 값(value)를 아래와 같이 구분했다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;변수&lt;&#x2F;code&gt;는 모두 &lt;strong&gt;홀수&lt;&#x2F;strong&gt;로 표기한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;값&lt;&#x2F;code&gt;은 모두 $2$를 곱한 값으로 배열 원소에 저장한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-1-example&quot;&gt;1-1. Example&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-1-example&quot; aria-label=&quot;Anchor link for: 1-1-example&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;아래와 같은 예제 소스 코드 &lt;code&gt;example.rs&lt;&#x2F;code&gt;가 있다고 해보자.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;	&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i64&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;7&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;	&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; y&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i64&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;7&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;	&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; z&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i64&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; x &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt; y&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;	&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; a&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i64&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;4&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt; z&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;각각의 줄은 다음과 같이 해석된다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; class=&quot;language-js z-code&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;	&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;14&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; #&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt; &lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;assign&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;x&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;7&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;	&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;14&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; #&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt; &lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;assign&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;y&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;7&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;	&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;   &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; #&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt; &lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;addition&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;z&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;    &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;x&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;y&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;	&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;7&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;   &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;  #&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt; &lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;division&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;a&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;4&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;z&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;값에 해당하는 $7, -7, 4$ 는 모두 2배 곱해져서 배열로 정리되어 있음을 확인할 수 있다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2-circuit&quot;&gt;2. Circuit&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-circuit&quot; aria-label=&quot;Anchor link for: 2-circuit&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Parser는 단순하게 구현만 하면 됐지만, Circuit에서는 &lt;strong&gt;정적분석&lt;&#x2F;strong&gt;의 방법을 정하고 이를 구현해야 했다.
이에 관해 &quot;정적 분석은 &lt;strong&gt;계산 안하기&lt;&#x2F;strong&gt; 하는 것이라 생각할 수 있다.&quot; 라는 조언을 바탕으로 아래와 같이 분석 방법을 정했다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;양수인 &lt;strong&gt;값&lt;&#x2F;strong&gt;은 $+$로 둔다.&lt;&#x2F;li&gt;
&lt;li&gt;음수인 &lt;strong&gt;값&lt;&#x2F;strong&gt;은 $-$로 둔다.&lt;&#x2F;li&gt;
&lt;li&gt;덧셈의 피연산자에 관해 아래 세 가지 경우로 나뉠 수 있다.
&lt;ul&gt;
&lt;li&gt;(양수) + (양수) = 양수, 즉 $+$ 가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;(음수) + (음수) = 음수, 즉 $-$가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;(양수) + (음수) = ??&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;양수와 음수를 더한 경우 결과를 $T$라고 두었으며, 이는 ${+, -, 0}$ 중 하나이다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;division by zero&lt;&#x2F;code&gt; 는 나눗셈의 제수(분모)가 $0$일 때 발생한다.
하지만,&lt;em&gt;정확한 계산&lt;&#x2F;em&gt; 수행없이 에러 발생의 가능성을 분석하기 위해서는 &#x27;제수가 $T$ 인지&#x27;를 검사하는 것으로 충분하다.&lt;&#x2F;p&gt;
&lt;p&gt;만약 검사하는 코드가 &lt;strong&gt;우주선&lt;&#x2F;strong&gt;이나 &lt;strong&gt;비행기&lt;&#x2F;strong&gt;에 들어가는 코드라고 생각해보자.
&lt;code&gt;division by zero&lt;&#x2F;code&gt; 에러로 인해 프로그램이 정지하거나 문제를 일으키는 경우, 우주비행사 또는 비행기 탑승객들의 생명에 직접적인 영향을 끼칠 수 있다.
따라서, 실제로 에러가 발생할지 여부는 확실치 않더라도 가능성을 검출하는 것은 경우에 따라 대단히 중요해질 수 있음을 생각할 수 있다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-1-byeonsu-gabs-jeojang&quot;&gt;2-1. 변수 값 저장&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-1-byeonsu-gabs-jeojang&quot; aria-label=&quot;Anchor link for: 2-1-byeonsu-gabs-jeojang&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;홀수&lt;&#x2F;strong&gt;로 표시한 변수는 결국 어떠한 정보를 갖게 된다.&lt;&#x2F;p&gt;
&lt;p&gt;정적 분석에서는 &lt;strong&gt;실제 계산&lt;&#x2F;strong&gt;이 없이 분석이 진행되야 하므로, Circuit 내에서는 아래와 같은 작업이 이뤄진다.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;값의 &lt;code&gt;크기&lt;&#x2F;code&gt;는 잊고 &lt;code&gt;부호&lt;&#x2F;code&gt;만 변수에 저장&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;예를 들어, 아래와 같은 코드가 있다고 해보자.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;	&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; p&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i64&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;11&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;이를 Parser를 통해 배열로 변환하면 아래와 같은 결과를 얻는다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; class=&quot;language-js z-code&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;	&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;22&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; #&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt; &lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;assign&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;p&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;11&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;  &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;그리고 이를 Circuit 내부에서는 값의 &lt;code&gt;크기&lt;&#x2F;code&gt;인 $11$은 잊어버리고 그 &lt;code&gt;부호&lt;&#x2F;code&gt;인 $+$만 남긴다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; class=&quot;language-js z-code&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;p&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;+&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-2-t-gyesan-gwajeong&quot;&gt;2-2.  $T$ 계산 과정&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-2-t-gyesan-gwajeong&quot; aria-label=&quot;Anchor link for: 2-2-t-gyesan-gwajeong&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;$T$값은 &lt;strong&gt;덧셈&lt;&#x2F;strong&gt;연산을 통해 얻을 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;따라서, &lt;code&gt;Op Type&lt;&#x2F;code&gt;이 &lt;em&gt;Addition&lt;&#x2F;em&gt; 인 경우에 &lt;code&gt;rhs elem 1&lt;&#x2F;code&gt;과 &lt;code&gt;rhs elem 2&lt;&#x2F;code&gt;의 &lt;code&gt;부호&lt;&#x2F;code&gt;정보를 확인하고 ${+, -, T}$ 중 하나의 결과를 &lt;code&gt;lhs elem&lt;&#x2F;code&gt;에 저장하는 식으로 circuit을 구성했다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;gyeolgwa&quot;&gt;결과&lt;a class=&quot;zola-anchor&quot; href=&quot;#gyeolgwa&quot; aria-label=&quot;Anchor link for: gyeolgwa&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Please check the github repo: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;c0np4nn4&#x2F;simple_zk_spa&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>0-1 Knapsack w&#x2F; Backtracking</title>
		<published>2023-06-08T00:00:00+00:00</published>
		<updated>2023-06-08T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-06-08/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-06-08/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;general-algorithm-for-backtracking&quot;&gt;General Algorithm for backtracking&lt;a class=&quot;zola-anchor&quot; href=&quot;#general-algorithm-for-backtracking&quot; aria-label=&quot;Anchor link for: general-algorithm-for-backtracking&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; class=&quot;language-cpp z-code&quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-full-identifier z-c++&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c++&quot;&gt;checknode&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;node &lt;span class=&quot;z-variable z-parameter z-c++&quot;&gt;v&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  node u&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;v&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; best_value&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    best_value &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;v&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;promising&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;v&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;auto&lt;&#x2F;span&gt; c&lt;span class=&quot;z-keyword z-operator z-ternary z-c&quot;&gt;:&lt;&#x2F;span&gt; v&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;checknode&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;u&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;non-promising-node&quot;&gt;Non-Promising Node&lt;a class=&quot;zola-anchor&quot; href=&quot;#non-promising-node&quot; aria-label=&quot;Anchor link for: non-promising-node&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;기존의 &lt;code&gt;0-1 knapsack problem&lt;&#x2F;code&gt; 에서와 마찬가지로, &lt;code&gt;Non-Promising&lt;&#x2F;code&gt; 여부를 체크하기 위해 아래 용어들을 정의합니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtylw&gt;&lt;em&gt;weight&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt;: 지금까지 선택한 모든 item 들의 무게 합&lt;&#x2F;li&gt;
&lt;li&gt;&lt;txtylw&gt;&lt;em&gt;profit&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt;: 지금까지 선택된 item 들의 이익 합&lt;&#x2F;li&gt;
&lt;li&gt;&lt;txtylw&gt;&lt;u&gt;&lt;em&gt;max_profit&lt;&#x2F;em&gt;&lt;&#x2F;u&gt;&lt;&#x2F;txtylw&gt;: 지금까지 계산된 &lt;txtylw&gt;&lt;em&gt;profit&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; 중 최대값&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;그리고, &lt;txtred&gt;&lt;em&gt;&lt;strong&gt;Backtracking&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;txtred&gt; 에서는 여기에 두 용어를 추가로 정의합니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtylw&gt;&lt;em&gt;totweight&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt;: 지금까지의 무게합 + 추가할 수 있는 무게 총합&lt;&#x2F;li&gt;
&lt;li&gt;&lt;txtylw&gt;&lt;em&gt;bound&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt;: 지금까지의 profit + 추가할 수 있는 profit + 단위 무게로 채워넣을 수 있는 profit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정말 이름 그대로 &lt;txtylw&gt;&lt;em&gt;bound&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; 는, &lt;u&gt;현재 노드에서 아래로 쭉 정답을 찾아나갔을 때, 얻을 수 있는 최대 이익&lt;&#x2F;u&gt; 을 나타냅니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Non-Promising&lt;&#x2F;code&gt; 조건들은 아래와 같습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtylw&gt;&lt;em&gt;weight&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; 값이 상한선인 &lt;txtred&gt;&lt;em&gt;&lt;strong&gt;W&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;txtred&gt; 보다 큰가?&lt;&#x2F;li&gt;
&lt;li&gt;해당 노드에서의 &lt;txtylw&gt;&lt;em&gt;bound&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; 값이 현재 &lt;txtred&gt;&lt;em&gt;&lt;strong&gt;max profit&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;txtred&gt; 보다 작은가?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;state-space-tree&quot;&gt;State Space Tree&lt;a class=&quot;zola-anchor&quot; href=&quot;#state-space-tree&quot; aria-label=&quot;Anchor link for: state-space-tree&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;그림과 함께 보면 이해가 쉬울 수 있습니다.&lt;&#x2F;li&gt;
&lt;li&gt;다음과 같이 아이템들이 주어졌다고 해보겠습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;center&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;i&lt;&#x2F;th&gt;&lt;th&gt;$p_i$&lt;&#x2F;th&gt;&lt;th&gt;$w_i$&lt;&#x2F;th&gt;&lt;th&gt;$p_i &#x2F; w_i$&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;$40&lt;&#x2F;td&gt;&lt;td&gt;2g&lt;&#x2F;td&gt;&lt;td&gt;$20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;$30&lt;&#x2F;td&gt;&lt;td&gt;5g&lt;&#x2F;td&gt;&lt;td&gt;$6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;$50&lt;&#x2F;td&gt;&lt;td&gt;10g&lt;&#x2F;td&gt;&lt;td&gt;$5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;$10&lt;&#x2F;td&gt;&lt;td&gt;5g&lt;&#x2F;td&gt;&lt;td&gt;$2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;center&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그리고, 문제에서 제공한 무게 상한선 &lt;txtred&gt;&lt;em&gt;&lt;strong&gt;W&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;txtred&gt; 값은 $16$ 이라 하겠습니다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;txtylw&gt;State Space Tree&lt;&#x2F;txtylw&gt;가 &lt;u&gt;&lt;em&gt;왼쪽 자식&lt;&#x2F;em&gt;&lt;&#x2F;u&gt;은 &lt;txtred&gt;선택했음&lt;&#x2F;txtred&gt;을 의미하고, &lt;u&gt;&lt;em&gt;오른쪽 자식&lt;&#x2F;em&gt;&lt;&#x2F;u&gt;은 &lt;txtred&gt;선택하지 않음&lt;&#x2F;txtred&gt;을 의미한다고 해보겠습니다.
&lt;img src=&quot;..&#x2F;..&#x2F;..&#x2F;images&#x2F;post&#x2F;cb20337&#x2F;backtracking_knapsack_01.png&quot; width=&quot;400rem&quot; alt=&quot;not yet&quot; style=&quot;border: 2px solid #b3deef&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;그럼 &lt;txtylw&gt;&lt;em&gt;Root Node&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; 는 위 그림과 같은 값을 갖게 됩니다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;profit&lt;&#x2F;em&gt;: $0&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;weight&lt;&#x2F;em&gt;: 0g&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;bound&lt;&#x2F;em&gt;: $0$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt;&lt;em&gt;(현재 weight)&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; $+ (40 + 30)$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt;&lt;em&gt;(&lt;txtred&gt;&lt;em&gt;&lt;strong&gt;W&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;txtred&gt;를 넘지 않는 선에서의 최대 이익)&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; $+ (16 - 7) * (50 &#x2F; 10)$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt; &lt;em&gt;(나머지 무게를 partial profit 으로 최대한 채운 값)&lt;&#x2F;em&gt; &lt;&#x2F;txtylw&gt; $= 0 + 70 + 45 = 115$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;img src=&quot;..&#x2F;..&#x2F;..&#x2F;images&#x2F;post&#x2F;cb20337&#x2F;backtracking_knapsack_02.png&quot; width=&quot;400rem&quot; alt=&quot;not yet&quot; style=&quot;border: 2px solid #b3deef&quot;&#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;만약 첫 번째 아이템을 선택했다면, 아래와 같은 값을 갖게 됩니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;profit&lt;&#x2F;em&gt;: $40 &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt;&lt;em&gt;(max profit 갱신: $40)&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;weight&lt;&#x2F;em&gt;: 2g&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;bound&lt;&#x2F;em&gt;: $40$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt;&lt;em&gt;(현재 weight)&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; $+ 30$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt;&lt;em&gt;(&lt;txtred&gt;&lt;em&gt;&lt;strong&gt;W&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;txtred&gt;를 넘지 않는 선에서의 최대 이익)&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; $+ (16 - 7) * (50 &#x2F; 10)$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt; &lt;em&gt;(나머지 무게를 partial profit 으로 최대한 채운 값)&lt;&#x2F;em&gt; &lt;&#x2F;txtylw&gt; $= 40 + 30 + 45 = 115$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;img src=&quot;..&#x2F;..&#x2F;..&#x2F;images&#x2F;post&#x2F;cb20337&#x2F;backtracking_knapsack_03.png&quot; width=&quot;400rem&quot; alt=&quot;not yet&quot; style=&quot;border: 2px solid #b3deef&quot;&#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;만약 두 번째 아이템을 선택하지 &lt;txtred&gt;않는다면&lt;&#x2F;txtred&gt;,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;profit&lt;&#x2F;em&gt;: $40&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;weight&lt;&#x2F;em&gt;: 2g&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;bound&lt;&#x2F;em&gt;: $40$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt;&lt;em&gt;(현재 weight)&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; $+ 50$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt;&lt;em&gt;(&lt;txtred&gt;&lt;em&gt;&lt;strong&gt;W&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;txtred&gt;를 넘지 않는 선에서의 최대 이익)&lt;&#x2F;em&gt;&lt;&#x2F;txtylw&gt; $+ (16 - 12) * (10 &#x2F; 5)$ &lt;txtylw style=&quot;font-size: 0.8rem&quot;&gt; &lt;em&gt;(나머지 무게를 partial profit 으로 최대한 채운 값)&lt;&#x2F;em&gt; &lt;&#x2F;txtylw&gt; $= 40 + 50 + 8 = 98$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;이러한 방식으로 &lt;txtred&gt;Backtracking&lt;&#x2F;txtred&gt; 을 진행하며, 적절한 pruning 을 통해 답을 찾아갈 수 있습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;a class=&quot;zola-anchor&quot; href=&quot;#algorithm&quot; aria-label=&quot;Anchor link for: algorithm&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;이를 C++ 코드로 작성하면 아래와 같습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; class=&quot;language-cpp z-code&quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 현재 노드에서의 profit, weight 값을 갖고 옵니다.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-full-identifier z-c++&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c++&quot;&gt;knapsack&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;index &lt;span class=&quot;z-variable z-parameter z-c++&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-c++&quot;&gt;profit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-c++&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 만약 무게 제한도 통과하고, maxprofit 보다 큰 이익인 상태라면
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 정답 후보로 기록해둡니다.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;weight &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; W &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt; profit &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; maxprofit&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    maxprofit &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; profit&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    best_num &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; i&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; best_set 은 [1, 0, 0, 1, ...] 같은 형태로 이해하면 됩니다.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    best_set &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; is_include&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; promising 노드일 때, 좌우 자식에 대한 탐색 구현입니다.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;promising&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    is_include&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c++&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;true&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;knapsack&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;i&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c++&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; profit &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; p&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c++&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; weight &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; w&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c++&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    is_include&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c++&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;false&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-variable z-function z-c++&quot;&gt;knapsack&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;i&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c++&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; profit&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; weight&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;bool&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-full-identifier z-c++&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c++&quot;&gt;promising&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c++&quot;&gt;&lt;span class=&quot;z-meta z-group z-c++&quot;&gt;index &lt;span class=&quot;z-variable z-parameter z-c++&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  index j&lt;span class=&quot;z-punctuation z-separator z-c++&quot;&gt;,&lt;&#x2F;span&gt; k&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; totweight&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-storage z-type z-c&quot;&gt;float&lt;&#x2F;span&gt; bound&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 만약 무게 한도를 초과했다면 끝입니다..
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;weight &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; W&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-return z-c++&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;false&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; bound 를 계산하는 블럭입니다.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    j &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c++&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    bound &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; profit&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    totweight &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; weight&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 일단 무게 한도 내에서 추가할 수 있는 최대한 추가 해봅니다.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;while&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;j &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt; totweight &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; w&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;j&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; W&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;      totweight &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;+=&lt;&#x2F;span&gt; w&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;j&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;      bound &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;+=&lt;&#x2F;span&gt; p&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;j&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;      j&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 남은 무게 공간은 partial profit 으로 채웁니다.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    k &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; j&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-c++&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;k &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; n&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c++&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;      bound &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-c&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;W&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;-&lt;&#x2F;span&gt;totweight&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c++&quot;&gt;(&lt;&#x2F;span&gt;p&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;k&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;&#x2F;&lt;&#x2F;span&gt;w&lt;span class=&quot;z-meta z-brackets z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c++&quot;&gt;[&lt;&#x2F;span&gt;k&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c++&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c++&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 만약 bound 값이 maxprofit 보다 작다면 끝입니다..
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-flow z-return z-c++&quot;&gt;return&lt;&#x2F;span&gt; bound &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; maxprofit&lt;span class=&quot;z-punctuation z-terminator z-c++&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c++&quot;&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c++&quot;&gt;&lt;span class=&quot;z-meta z-block z-c++&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c++&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;ref&quot;&gt;Ref&lt;a class=&quot;zola-anchor&quot; href=&quot;#ref&quot; aria-label=&quot;Anchor link for: ref&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;seungjuitmemo.tistory.com&#x2F;109&quot;&gt;blog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Time complexity &amp; NP problems</title>
		<published>2023-05-30T00:00:00+00:00</published>
		<updated>2023-05-30T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-05-30/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-05-30/</id>
		<content type="html">&lt;h1 id=&quot;time-complexity-np-problems&quot;&gt;Time Complexity &amp;amp; NP Problems&lt;a class=&quot;zola-anchor&quot; href=&quot;#time-complexity-np-problems&quot; aria-label=&quot;Anchor link for: time-complexity-np-problems&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Polynomial-Time Algorithm&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;다루기 힘든 정도(Intractability)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;문제의 종류&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;P&lt;&#x2F;code&gt;, &lt;code&gt;NP&lt;&#x2F;code&gt;, &lt;code&gt;NP-Complete&lt;&#x2F;code&gt;, &lt;code&gt;NP-Hard&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;P&lt;&#x2F;code&gt; 문제&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtred&gt;다항시간 내에 해결&lt;&#x2F;txtred&gt; 할 수 있는 문제&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NP&lt;&#x2F;code&gt; 문제&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;txtred&gt;다항시간 내에 답의 존재여부&lt;&#x2F;txtred&gt; 를 알 수 있는 문제&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;결정형 문제: &#x27;yes&#x27; or &#x27;no&#x27;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;결정형 알고리즘: &lt;code&gt;deterministic algorithm&lt;&#x2F;code&gt;, 다음 단계가 유일하게 결정되는 알고리즘&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;비결정형 알고리즘: &lt;code&gt;non-deterministic algorithm&lt;&#x2F;code&gt;, 다음 단계가 유일하게 결정되는 알고리즘&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;비결정형 알고리즘&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;추측 단게 (비결정)
&lt;ul&gt;
&lt;li&gt;임의의 $s$ 를 &lt;em&gt;추측한 해답&lt;&#x2F;em&gt;으로 생성함&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;검증 단계 (결정)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;다차시간 비결정 알고리즘(polynomial-time nondeterministic algorithm)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;검증 단계가 다차시간 알고리즘&lt;&#x2F;u&gt;인 비결정 알고리즘&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NP&lt;&#x2F;code&gt;: &lt;code&gt;다차시간 비결정 알고리즘&lt;&#x2F;code&gt;으로 풀 수 있는, &lt;txtylw&gt;모든 진위 판별 문제의 집합&lt;&#x2F;txtylw&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NP-Hard&lt;&#x2F;code&gt;: &lt;code&gt;NP&lt;&#x2F;code&gt;만큼 어려운 문제&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NP-Complete&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;interactable&quot;&gt;Interactable&lt;a class=&quot;zola-anchor&quot; href=&quot;#interactable&quot; aria-label=&quot;Anchor link for: interactable&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;문제의 분류&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;polynomial time algorithm 이 발견된 문제 &lt;txtred&gt;P 문제&lt;&#x2F;txtred&gt;&lt;&#x2F;li&gt;
&lt;li&gt;다루기 힘듦이 증명된 문제 &lt;txtred&gt;P도 NP도 아님&lt;&#x2F;txtred&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Halting Problem&lt;&#x2F;code&gt;: &lt;em&gt;&lt;strong&gt;결정 불가능&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; (&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;johngrib.github.io&#x2F;wiki&#x2F;halting-problem&#x2F;&quot;&gt;ref&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;다루기 힘듦도, poly-time algrotihm 도 발견되지 않은 문제 &lt;txtred&gt;NP&lt;&#x2F;txtred&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;최적화&lt;&#x2F;code&gt; vs &lt;code&gt;결정&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;최적화&lt;&#x2F;code&gt;: &lt;txtylw&gt;가장 좋은 답&lt;&#x2F;txtylw&gt;을 찾는 것&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;결정&lt;&#x2F;code&gt;: boundary 에 대해, 답이 존재하는지를 결정&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TSP&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;0&#x2F;1 Knapsack&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Graph Coloring&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A* algorithm</title>
		<published>2023-05-02T00:00:00+00:00</published>
		<updated>2023-05-02T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-05-02/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-05-02/</id>
		<content type="html">&lt;h1 id=&quot;a-algorithm&quot;&gt;A* Algorithm&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-algorithm&quot; aria-label=&quot;Anchor link for: a-algorithm&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A* 알고리즘&lt;&#x2F;code&gt;은 &lt;em&gt;&lt;strong&gt;그래프 탐색&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;, &lt;em&gt;&lt;strong&gt;경로 탐색&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; 알고리즘 입니다.&lt;&#x2F;li&gt;
&lt;li&gt;임의의 노드 $v_i$ 에 대하여, 평가함수 $F(v)$ 를 아래와 같이 정의합니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$$F(v_i) = g(v_i) + h(v_i)$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;함수 $g$ 와 함수 $h$ 는 다음을 의미합니다.
&lt;ul&gt;
&lt;li&gt;$g(v)$: 시작점으로부터 $v$ 까지 경로의 비용&lt;&#x2F;li&gt;
&lt;li&gt;$h(v)$: $v$ 로부터 도착점까지의 비용(추정치)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;A* 알고리즘&lt;&#x2F;code&gt;은 이 평가함수 $F(v)$ 로 얻은 &lt;code&gt;비용&lt;&#x2F;code&gt;에 대해, &lt;code&gt;Best-First Search&lt;&#x2F;code&gt; 방식으로 &lt;u&gt;시작점으로부터 도착점까지 가장 적은 비용이 드는 경로&lt;&#x2F;u&gt;를 찾아냅니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;$h(v)$ 함수로 비용의 추정치를 구하는 직관적인 방법은 아래와 같습니다.
&lt;ul&gt;
&lt;li&gt;유클리드 거리&lt;&#x2F;li&gt;
&lt;li&gt;맨하탄 거리&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Shortest Path&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; 를 찾는 다른 알고리즘으로 &lt;code&gt;Dijkstra&lt;&#x2F;code&gt; 가 있습니다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;A*&lt;&#x2F;code&gt; 와 &lt;code&gt;Dijkstra&lt;&#x2F;code&gt; 는 도착점(Goal)에 차이가 있습니다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A*&lt;&#x2F;code&gt; 는 단 &lt;code&gt;하나의 도착점&lt;&#x2F;code&gt;을 향해 탐색합니다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Dijkstra&lt;&#x2F;code&gt; 는 출발점으로부터 다른 &lt;code&gt;모든 Vertex&lt;&#x2F;code&gt; 에 이르는 최단경로를 구합니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Dijkstra&lt;&#x2F;code&gt; 는 사실 &lt;code&gt;A*&lt;&#x2F;code&gt; 알고리즘에서 $h(v) = 0$ 으로 두었을 때와 같습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;8-puzzle-problem&quot;&gt;8-puzzle Problem&lt;a class=&quot;zola-anchor&quot; href=&quot;#8-puzzle-problem&quot; aria-label=&quot;Anchor link for: 8-puzzle-problem&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;(그림 추가 예정)&lt;&#x2F;li&gt;
&lt;li&gt;$3\times3$ 크기의 보드가 있을 때, 1에서부터 8까지의 블럭이 끼워져 있는 퍼즐 보드의 정답을 찾는 문제입니다.&lt;&#x2F;li&gt;
&lt;li&gt;각 보드의 상태를 트리구조로 두고 문제를 풀 수 있으며, 평가함수에 관한 함수를 아래와 같이 정의합니다.
&lt;ul&gt;
&lt;li&gt;$g$: 트리의 깊이&lt;&#x2F;li&gt;
&lt;li&gt;$h$: 정답과 현재 보드 상태의 mismatch 갯수&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;$F=g+h$ 의 값이 최소인 노드를 선택하다보면, 정답으로 향하는 최소 경로를 구할 수 있게 됩니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Backtracking</title>
		<published>2023-04-25T00:00:00+00:00</published>
		<updated>2023-04-25T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-04-25/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-04-25/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;2023 Spring, PNU, CB20337 (Professor Lee)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;backtracking&quot;&gt;Backtracking&lt;a class=&quot;zola-anchor&quot; href=&quot;#backtracking&quot; aria-label=&quot;Anchor link for: backtracking&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Backtracking&lt;&#x2F;code&gt;을 이해할 때 &lt;code&gt;미로 (maze)&lt;&#x2F;code&gt; 를 탈출하는 과정을 생각해 볼 수 있습니다.&lt;&#x2F;li&gt;
&lt;li&gt;길을 선택할 때, 각 길이 어떤 결과를 초래할지는 모르지만 출구로 가는 길을 기대하며 선택합니다.&lt;&#x2F;li&gt;
&lt;li&gt;선택 이후에 또 다음 선택이 이어집니다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 길을 돌아다녀봤다면, 어쨌든 출구를 찾을 수는 있습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;즉, 특정 &lt;code&gt;Set&lt;&#x2F;code&gt; 으로부터 선택된 객체들의 &lt;code&gt;Sequence&lt;&#x2F;code&gt; 가 어떠한 &lt;code&gt;기준&lt;&#x2F;code&gt;을 만족하는 문제를 해결할 때 쓰일 수 있는 방법입니다.&lt;&#x2F;li&gt;
&lt;li&gt;그리고, &lt;code&gt;Backtracking&lt;&#x2F;code&gt; 은 &lt;code&gt;DFS&lt;&#x2F;code&gt; 의 변형입니다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;preorder&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; traversal dfs 알고리즘은 아래와 같습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-linenos data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;depth_first_tree_search&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;node &lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;v&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  node u&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  visit v&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;each child u of v&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; 
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;depth_first_tree_search&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;u&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위에서 &lt;em&gt;each child&lt;&#x2F;em&gt; 라고 명시한 부분에 (&lt;em&gt;left to right&lt;&#x2F;em&gt;) 라는 정보가 내포되어 있다고 가정하면, 아래와 같은 트리를 확인할 수 있습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;img src=&quot;..&#x2F;..&#x2F;images&#x2F;post&#x2F;cb20337&#x2F;backtracking_01.png&quot; alt=&quot;adsf&quot; width=&quot;400rem&quot; &#x2F;&gt;
&lt;center&gt;
출처: Lecture Slide 
&lt;&#x2F;center&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;state-space-tree&quot;&gt;State Space Tree&lt;a class=&quot;zola-anchor&quot; href=&quot;#state-space-tree&quot; aria-label=&quot;Anchor link for: state-space-tree&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;만약 미로를 탈출하는 문제가 주어졌다고 가정한다면, 아래와 같이 길을 따라 움직이는 경우를 나열할 수 있습니다.&lt;&#x2F;li&gt;
&lt;li&gt;좀 더 형식적으로 말하자면, 각 경우는 &lt;code&gt;Root부터 Leaf에 도달하기까지의 경로&lt;&#x2F;code&gt; 입니다.&lt;&#x2F;li&gt;
&lt;li&gt;즉, &lt;em&gt;candidate solution&lt;&#x2F;em&gt; 이라고도 할 수 있습니다. (leaf 가 exit 일 경우는 &lt;em&gt;&lt;strong&gt;solution&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(전), (후), (좌), (우) 로 움직일 수 있다고 할 때
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[(전), (전), (전), (전), ...]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[(전), (좌), (전), (전), ...]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[(전), (우), (전), (전), ...]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[(전), (후), (전), (전), ...]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[(전), (좌), (우), (전), ...]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;그리고, 이러한 경우들을 &lt;em&gt;&lt;strong&gt;Tree&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; 구조로 나타낸 것을 &lt;code&gt;State Space Tree&lt;&#x2F;code&gt;라 합니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;img src=&quot;..&#x2F;..&#x2F;images&#x2F;post&#x2F;cb20337&#x2F;backtracking_02.png&quot; alt=&quot;adsf&quot; width=&quot;700rem&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;각 path 의 노드 중, &lt;em&gt;&lt;strong&gt;solution&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; 으로 이어지는 node 를 &lt;code&gt;Promising(node)&lt;&#x2F;code&gt; 이라 부릅니다.&lt;&#x2F;li&gt;
&lt;li&gt;또, &lt;code&gt;Nonpromising&lt;&#x2F;code&gt; 일 경우, 바로 부모 노드로 backtracking 해버리는 방법을 &lt;code&gt;pruning&lt;&#x2F;code&gt; 이라 부릅니다. (&lt;em&gt;가지치기&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Backtracking&lt;&#x2F;code&gt; 은 이렇게 정리된 &lt;code&gt;pruned state space tree&lt;&#x2F;code&gt; 에서 진행하는 &lt;code&gt;DFS&lt;&#x2F;code&gt; 라 생각하면 됩니다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Backtracking&lt;&#x2F;code&gt; 의 일반적인 코드는 아래와 같이 적을 수 있습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-linenos data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;checknode&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;node &lt;span class=&quot;z-variable z-parameter z-c&quot;&gt;v&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  node u&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;promising&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;v&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;there is a solution at v&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      write the solution&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;else&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;each child u of v&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;        &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;checknode&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;v&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;promising&lt;&#x2F;code&gt; 함수는 각 &lt;code&gt;Backtracking&lt;&#x2F;code&gt; 문제마다 달라집니다.&lt;&#x2F;li&gt;
&lt;li&gt;또, &lt;code&gt;Backtracking&lt;&#x2F;code&gt; 은 실제로 &lt;code&gt;Tree&lt;&#x2F;code&gt; 를 만들 필요 없이 &lt;em&gt;implicitly&lt;&#x2F;em&gt; 존재한다고 생각하고 문제를 풀 수도 있습니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>(Undergraduate) 2023 Spring Courses</title>
		<published>2023-03-09T00:00:00+00:00</published>
		<updated>2023-03-09T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-lectures-index/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-lectures-index/</id>
		<content type="html">&lt;h1 id=&quot;spring-2023&quot;&gt;Spring, 2023&lt;a class=&quot;zola-anchor&quot; href=&quot;#spring-2023&quot; aria-label=&quot;Anchor link for: spring-2023&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-index&#x2F;old-2023-lectures-cb20337-index.md&quot;&gt;CB20337, Algorithm&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-index&#x2F;old-2023-lectures-cb24149-index.md&quot;&gt;CB24149, Data Communication&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-index&#x2F;old-2023-lectures-cb26044-index.md&quot;&gt;CB26044, Operating System&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-index&#x2F;old-2023-lectures-cb26207-index.md&quot;&gt;CB26207, Computer Architecture&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-index&#x2F;old-2023-lectures-cb35268-index.md&quot;&gt;CB35268, Machine Learning&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-index&#x2F;old-2023-lectures-cb26105-index.md&quot;&gt;CB26105, Programming Language&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>algorithm(1) sort</title>
		<published>2023-03-07T00:00:00+00:00</published>
		<updated>2023-03-07T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-03-07/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-03-07/</id>
		<content type="html">&lt;h2 id=&quot;sorting&quot;&gt;Sorting&lt;a class=&quot;zola-anchor&quot; href=&quot;#sorting&quot; aria-label=&quot;Anchor link for: sorting&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;정렬을 왜 할까?
&lt;ul&gt;
&lt;li&gt;탐색할 때 좋다.&lt;&#x2F;li&gt;
&lt;li&gt;$\therefore$ Searching 과 Sorting 을 연관해서 생각하면 됨.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;search&quot;&gt;Search&lt;a class=&quot;zola-anchor&quot; href=&quot;#search&quot; aria-label=&quot;Anchor link for: search&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Terms&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;List: 하나 이상의 field 로 된 record 의 집합&lt;&#x2F;li&gt;
&lt;li&gt;Key: A Field used to specify the record&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;순차 탐색(Sequential Search)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;one-way 로 record 를 검사하는 것&lt;&#x2F;li&gt;
&lt;li&gt;$O(N)$ 의 시간이 걸림&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이진 탐색 (Binary Search)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;키에 따라 정렬되어 있다고 가정&lt;&#x2F;li&gt;
&lt;li&gt;$O(\log N)$ 로 시간을 줄일 수 있음
&lt;ul&gt;
&lt;li&gt;한 번의 탐색마다 전체 space 가 &lt;mark class=&quot;hltr-yellow&quot;&gt;절반&lt;&#x2F;mark&gt;이 되기 때문
$$
\begin{align}
\frac{n}{2}, \frac{n}{2^2}, \cdots, \frac{n}{2^k} \newline
2^k = n \newline
\therefore k = \log n
\end{align}
$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Space 크기가 작다면 그냥 Sequential Search 를 하는게 효율적일 수 있다.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;보간법(Interpolation) 탐색&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;리스트가 정렬되었다고 가정함&lt;&#x2F;li&gt;
&lt;li&gt;탐색의 성질은 리스트에 있는 키의 분포에 달려있음&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;li&gt;리스트를 반복해서 탐색할 때 정렬 상태를 유지하는 것이 유리함&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-sorting-problem-def&quot;&gt;The Sorting Problem (Def)&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-sorting-problem-def&quot; aria-label=&quot;Anchor link for: the-sorting-problem-def&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Input, Output 이 정의된 뒤 방법이 소개되는 양식이 있다고 함&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Input&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A seq of n numbers: $a_1$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;jeongryeolyi-pilyoseong-misc&quot;&gt;정렬의 필요성(?, misc)&lt;a class=&quot;zola-anchor&quot; href=&quot;#jeongryeolyi-pilyoseong-misc&quot; aria-label=&quot;Anchor link for: jeongryeolyi-pilyoseong-misc&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;활용
&lt;ul&gt;
&lt;li&gt;탐색에서 보조로 사용&lt;&#x2F;li&gt;
&lt;li&gt;리스트의 엔트리를 비교&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;방법
&lt;ul&gt;
&lt;li&gt;&lt;mark class=&quot;hltr-red&quot;&gt;Internal methods&lt;&#x2F;mark&gt;
&lt;ul&gt;
&lt;li&gt;Space 가 작아서, On-Memory 가 가능할 때&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;mark class=&quot;hltr-red&quot;&gt;External methods&lt;&#x2F;mark&gt;
&lt;ul&gt;
&lt;li&gt;Space 가 클 때&lt;&#x2F;li&gt;
&lt;li&gt;즉, HDD 등의 보조 기억장치를 이용하는 정렬&lt;&#x2F;li&gt;
&lt;li&gt;File System 과목에서 배움&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;jeongryeol-jongryu&quot;&gt;정렬 종류&lt;a class=&quot;zola-anchor&quot; href=&quot;#jeongryeol-jongryu&quot; aria-label=&quot;Anchor link for: jeongryeol-jongryu&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;o-n-2&quot;&gt;$O(n^2)$&lt;a class=&quot;zola-anchor&quot; href=&quot;#o-n-2&quot; aria-label=&quot;Anchor link for: o-n-2&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Bubble sort&lt;&#x2F;li&gt;
&lt;li&gt;Insertion sort&lt;&#x2F;li&gt;
&lt;li&gt;Selection sort&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;o-n-log-n&quot;&gt;$O(N \log N)$&lt;a class=&quot;zola-anchor&quot; href=&quot;#o-n-log-n&quot; aria-label=&quot;Anchor link for: o-n-log-n&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Quick Sort&lt;&#x2F;li&gt;
&lt;li&gt;Merge Sort&lt;&#x2F;li&gt;
&lt;li&gt;Heap Sort&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;bancig-bugajeogin-jaweoneul-gajyeowaseo-jeongryeolhandago-ham&quot;&gt;반칙? (부가적인 자원을 가져와서 정렬한다고 함)&lt;a class=&quot;zola-anchor&quot; href=&quot;#bancig-bugajeogin-jaweoneul-gajyeowaseo-jeongryeolhandago-ham&quot; aria-label=&quot;Anchor link for: bancig-bugajeogin-jaweoneul-gajyeowaseo-jeongryeolhandago-ham&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Radix Sort&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;bubble-sort&quot;&gt;bubble sort&lt;a class=&quot;zola-anchor&quot; href=&quot;#bubble-sort&quot; aria-label=&quot;Anchor link for: bubble-sort&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아이디어
&lt;ul&gt;
&lt;li&gt;List 의 인접한 원소를 자리바꿈하여 정렬함&lt;&#x2F;li&gt;
&lt;li&gt;ex) 가장 큰 값을 오른쪽으로 계속 보냄&lt;&#x2F;li&gt;
&lt;li&gt;구현은 매우 쉽지만, Insertion Sort 보다 느림&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;bubble-sort-running-time-calc&quot;&gt;Bubble-sort running time Calc&lt;a class=&quot;zola-anchor&quot; href=&quot;#bubble-sort-running-time-calc&quot; aria-label=&quot;Anchor link for: bubble-sort-running-time-calc&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BUBBLESORT(A)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	for i &amp;lt;- 1 to length[A]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;		do for j - length[A] downto i+1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;			do if A[j] &amp;lt; A[j - 1]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;				then exchange A[j] &amp;lt;-&amp;gt; A[j-1]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;line 2, 3, 4, 5 를 각각 $c_1, c_2, c_3, c_4$ 라고 하자&lt;&#x2F;li&gt;
&lt;li&gt;전체 시간 $T(n)$ 을 아래와 같이 계산할 수 있다.
$$T(n) = c_1(n+1) + c_2\sum_{i=1}^n (n - i + 1) + c_3\sum_{i=1}^n$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;아무튼, $n+1$ 에서 $+1$ 하는 이유는, &lt;code&gt;for&lt;&#x2F;code&gt;, &lt;code&gt;while&lt;&#x2F;code&gt; 등은 마지막으로 한번 더 돌기 때문에 붙여준다.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;insertion-sort&quot;&gt;Insertion Sort&lt;a class=&quot;zola-anchor&quot; href=&quot;#insertion-sort&quot; aria-label=&quot;Anchor link for: insertion-sort&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark class=&quot;hltr-blue&quot;&gt;Unsorted List&lt;&#x2F;mark&gt; ---&amp;gt; &lt;mark class=&quot;hltr-orange&quot;&gt;Sorted List&lt;&#x2F;mark&gt;&lt;&#x2F;li&gt;
&lt;li&gt;과정을 진행할 때, array 를 두 부분의 sub-array(&lt;mark class=&quot;hltr-blue&quot;&gt;unsorted&lt;&#x2F;mark&gt;, &lt;mark class=&quot;hltr-orange&quot;&gt;sorted&lt;&#x2F;mark&gt;) 로 구분함.&lt;&#x2F;li&gt;
&lt;li&gt;(Redundant 한 작업인 것 같아도, 일일이 다 비교해야함)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;INSERTION_SORT(A)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	for j &amp;lt;- 2 to n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	do key &amp;lt;- A[j]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;		&#x2F;&#x2F; i: Sorted List 에서 비교 대상을 바꾸는 것
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;		i &amp;lt;- j - 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;		while i &amp;gt; 0 and A[i] &amp;gt; key
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;		do A[i + 1] &amp;lt;- A[i]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;			i &amp;lt;- i - 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;		A[i + 1] &amp;lt;- key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;best-case-analysis&quot;&gt;Best Case Analysis&lt;a class=&quot;zola-anchor&quot; href=&quot;#best-case-analysis&quot; aria-label=&quot;Anchor link for: best-case-analysis&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;만약 미리 정렬이 되었다면, &lt;mark class=&quot;hltr-red&quot;&gt;자리바꿈&lt;&#x2F;mark&gt; 없이 linear time $O(N)$ 내에 작업을 완료할 수 있음&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;worst-case-analysis&quot;&gt;Worst Case Analysis&lt;a class=&quot;zola-anchor&quot; href=&quot;#worst-case-analysis&quot; aria-label=&quot;Anchor link for: worst-case-analysis&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;만약 반대로 정렬이 되어있다면, $O(N^2)$ 가 걸림&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;즉, Ordering 이 중요함&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;selection-sort&quot;&gt;Selection Sort&lt;a class=&quot;zola-anchor&quot; href=&quot;#selection-sort&quot; aria-label=&quot;Anchor link for: selection-sort&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정렬을 하면서 깃발을 꼽음&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;깃발이 위치한 곳을 선택했다고 생각하면 됨&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아이디어:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;list 에서 가장 작은&#x2F;큰 원소를 찾음&lt;&#x2F;li&gt;
&lt;li&gt;발견된 원소를 맨 앞&#x2F;뒤 원소와 Swap&lt;&#x2F;li&gt;
&lt;li&gt;정렬된 원소를 제외한 $N-1$ 개의 원소에 대해 위 두 과정을 반복함&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Bubble sort 와 비슷하지만, 여기서는 한 번만 Swap 하면 됨&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ordering (Sorting) 이 잘 되어 있어도 별 효용은 없음&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;SELECTION_SORT(A)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;n ← length[A]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;for j ← 1 to n - 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	&#x2F;&#x2F; j: index (최저값의 위치)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	do smallest ← j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;		for i ← j + 1 to n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;			do if A[i] &amp;lt; A[smallest]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;				then smallest ← i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;		exchange A[j] ↔ A[smallest]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;(Best, Worst case Analysis)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>algorithm(2) sort</title>
		<published>2023-03-07T00:00:00+00:00</published>
		<updated>2023-03-07T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-03-09/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-2023-03-09/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;이번 시간에는 앞서 배운 알고리즘보다 효율적인 알고리즘을 학습함&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;1-quick-sort&quot;&gt;1. Quick Sort&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-quick-sort&quot; aria-label=&quot;Anchor link for: 1-quick-sort&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Pivot, Recursive&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-merge-sort&quot;&gt;2. Merge Sort&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-merge-sort&quot; aria-label=&quot;Anchor link for: 2-merge-sort&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Iteration, Recursive&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;3-heap-sort&quot;&gt;3. Heap Sort&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-heap-sort&quot; aria-label=&quot;Anchor link for: 3-heap-sort&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CB20337</title>
		<published>2023-03-07T00:00:00+00:00</published>
		<updated>2023-03-07T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-index/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-lectures-cb20337-index/</id>
		<content type="html">&lt;h2 id=&quot;memo&quot;&gt;Memo&lt;a class=&quot;zola-anchor&quot; href=&quot;#memo&quot; aria-label=&quot;Anchor link for: memo&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-cb20337-2023-03-07&#x2F;&quot;&gt;2023_03_07&lt;&#x2F;a&gt;]: Sort (1)&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-cb20337-2023-03-09&#x2F;&quot;&gt;2023_03_09&lt;&#x2F;a&gt;]: Sort (2)&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-cb20337-2023-04-25&#x2F;&quot;&gt;2023_04_25&lt;&#x2F;a&gt;]: Backtracking&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-cb20337-2023-05-02&#x2F;&quot;&gt;2023_05_02&lt;&#x2F;a&gt;]: A* algorithm&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-cb20337-2023-05-30&#x2F;&quot;&gt;2023_05_30&lt;&#x2F;a&gt;]: Time complexity &amp;amp; NP Problem&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;c0np4nn4.github.io&#x2F;posts&#x2F;old-2023-lectures-cb20337-2023-06-08&#x2F;&quot;&gt;2023_06_08&lt;&#x2F;a&gt;]: 01 Knapsack Backtracking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>⛓️ [Near] Localnet</title>
		<published>2023-01-09T00:00:00+00:00</published>
		<updated>2023-01-09T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-near-localnet/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-near-localnet/</id>
		<content type="html">&lt;h1 id=&quot;localnet&quot;&gt;Localnet&lt;a class=&quot;zola-anchor&quot; href=&quot;#localnet&quot; aria-label=&quot;Anchor link for: localnet&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.near.org&#x2F;develop&#x2F;testing&#x2F;kurtosis-localnet&quot;&gt;Near Docs&lt;&#x2F;a&gt;] 에서 로컬 개발환경 구축을 위한 방법을 찾을 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;문서에서는 [&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.kurtosis.com&#x2F;&quot;&gt;Kurtosis&lt;&#x2F;a&gt;] 에서 제공하는 &lt;code&gt;Kurtosis NEAR pacakge&lt;&#x2F;code&gt; 를 이용하는 방법을 설명하고 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Kurtosis NEAR pacakge&lt;&#x2F;code&gt; 는 &lt;code&gt;Docker Container&lt;&#x2F;code&gt; 를 이용하여 아래 4 가지 서비스를 로컬 테스트용으로 제공한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Indexer for Explorer&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;NEAR Explorer&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;NEAR Wallet&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Local RPC Endpoint&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup&quot; aria-label=&quot;Anchor link for: setup&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.near.org&#x2F;develop&#x2F;testing&#x2F;kurtosis-localnet#setup&quot;&gt;Setup&lt;&#x2F;a&gt;] 에 나온 과정을 따르면 된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;우선&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;launch&lt;&#x2F;code&gt; 후 &lt;strong&gt;ACTION&lt;&#x2F;strong&gt; 섹션에서 환경변수 지정과 Alias 지정 등을 할 때는 &lt;u&gt;log 에 있는 것을 입력&lt;&#x2F;u&gt;하면 된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing&quot; aria-label=&quot;Anchor link for: testing&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.near.org&#x2F;develop&#x2F;testing&#x2F;kurtosis-localnet#testing&quot;&gt;Testing&lt;&#x2F;a&gt;] 에 나온대로 아래 명령을 입력했을 때 문제가 없으면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;local_near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; state test.near&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>⛓️ [Near] Write and Deploy a Smart Contract in Rust</title>
		<published>2023-01-02T00:00:00+00:00</published>
		<updated>2023-01-02T00:00:00+00:00</updated>
		<link href="https://c0np4nn4.github.io/posts/old-2023-near-write-and-deploy/" type="text/html"/>
		<id>https://c0np4nn4.github.io/posts/old-2023-near-write-and-deploy/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;본 포스팅은 [&lt;em&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;learn.figment.io&#x2F;tutorials&#x2F;write-and-deploy-a-smart-contract-on-near&quot;&gt;Figment.io&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;] 을 참고하여 작성됨&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;mogpyo&quot;&gt;목표&lt;a class=&quot;zola-anchor&quot; href=&quot;#mogpyo&quot; aria-label=&quot;Anchor link for: mogpyo&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Rust&lt;&#x2F;code&gt; 로 &lt;code&gt;Smart Contract&lt;&#x2F;code&gt;를 작성한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Smart Contract&lt;&#x2F;code&gt;를 &lt;code&gt;Near&lt;&#x2F;code&gt; on-chain 에 배포(&lt;code&gt;Deploy&lt;&#x2F;code&gt;)한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;near-cli&lt;&#x2F;code&gt;를 이용하여 배포된 contract와 Interact 해본다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;tools&#x2F;install&quot;&gt;Rust&lt;&#x2F;a&gt;]&lt;&#x2F;em&gt;,
&lt;em&gt;[&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;near-cli&quot;&gt;near-cli&lt;&#x2F;a&gt;]&lt;&#x2F;em&gt;,
&lt;em&gt;[&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;wallet.testnet.near.org&quot;&gt;near testnet account&lt;&#x2F;a&gt;]&lt;&#x2F;em&gt;
가 필요하다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;smart-contract-in-rust&quot;&gt;Smart Contract in Rust&lt;a class=&quot;zola-anchor&quot; href=&quot;#smart-contract-in-rust&quot; aria-label=&quot;Anchor link for: smart-contract-in-rust&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup&quot; aria-label=&quot;Anchor link for: setup&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Near&lt;&#x2F;code&gt;는 wasm 형태로 된 smart contract를 다룬다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;개발자는 &lt;code&gt;Near&lt;&#x2F;code&gt;에서 제공하는 &lt;strong&gt;SDK&lt;&#x2F;strong&gt;를 이용해서 &lt;code&gt;Rust&lt;&#x2F;code&gt; 언어를 &lt;code&gt;Near&lt;&#x2F;code&gt; 상에서 다룰 형태의 &lt;code&gt;Wasm&lt;&#x2F;code&gt;으로 컴파일할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;우선, Rust toolchain에 wasm target을 추가해야 한다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;rustup&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; target add wasm32-unknown-unknown&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이후 &lt;code&gt;Smart Contract&lt;&#x2F;code&gt;를 작성할 &lt;code&gt;Rust&lt;&#x2F;code&gt; lib crate 를 생성한다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; init&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;lib&lt;&#x2F;span&gt; my_contract&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;config.toml&lt;&#x2F;code&gt; 파일을 열어서 내용을 아래와 같이 수정한다.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;package&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;my_contract&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;version&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;0.1.0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;edition&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2021&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;lib&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;crate-type&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-array z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cdylib&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;rlib&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-array z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;near-sdk&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;3.1.0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;release&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;codegen-units&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-toml&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;opt-level&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;z&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;lto&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-toml&quot;&gt;true&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;debug&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-toml&quot;&gt;false&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;panic&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;abort&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;overflow-checks&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-toml&quot;&gt;true&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;[lib] 의 내용은 [&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;linkage.html&quot;&gt;이곳&lt;&#x2F;a&gt;] 을 참고하면 된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;[dependencies] 에서 &lt;code&gt;near-sdk&lt;&#x2F;code&gt; crate 를 사용하고 있음을 확인할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;writing-the-contract&quot;&gt;Writing the Contract&lt;a class=&quot;zola-anchor&quot; href=&quot;#writing-the-contract&quot; aria-label=&quot;Anchor link for: writing-the-contract&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;본 실습에서는 Contract가 갖고 있는 [&lt;em&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.near.org&#x2F;concepts&#x2F;storage&#x2F;storage-staking&quot;&gt;Storage&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;]를 이용하여 &lt;code&gt;CRUD&lt;&#x2F;code&gt; 기능을 구현해본다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Contract&lt;&#x2F;code&gt;는 크게 보면 아래의 구조를 갖고 있다.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;rs&quot; class=&quot;language-rs z-code&quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 1. Main Struct
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 2. Default Implementation
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 3. Core Logic
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 4. Tests
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1. Main Struct&lt;&#x2F;code&gt; 에서는 &lt;code&gt;Contract&lt;&#x2F;code&gt;에서 사용될 Struct를 정의한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;2. Default Impl&lt;&#x2F;code&gt; 에서는 Struct에 대한 Default trait을 정의한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;3. Core Logic&lt;&#x2F;code&gt; 에서는 &lt;code&gt;Contract&lt;&#x2F;code&gt;에서 사용될 핵심 기능들을 정의한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;4. Tests&lt;&#x2F;code&gt; 에서는 각종 Test Case를 작성하여 검사한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Contract 작성을 위한 기본 세팅은 아래와 같다.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;rs&quot; class=&quot;language-rs z-code&quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;near_sdk&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;borsh&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; BorshDeserialize&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; BorshSerialize&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;near_sdk&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;env&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; near_bindgen&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;near_sdk&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;collections&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;UnorderedMap&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;near_sdk&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;setup_alloc&lt;span class=&quot;z-keyword z-operator z-logical z-rust&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setup_alloc!()&lt;&#x2F;code&gt; 매크로는 내부적으로 &lt;code&gt;WebAssembly&lt;&#x2F;code&gt;를 위해 설계된 &lt;code&gt;wee_alloc&lt;&#x2F;code&gt;를 이용한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Rust&lt;&#x2F;code&gt; 코드는 이 allocator를 이용해서 runtime 때 필요한 메모리를 획득할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;1-main-struct&quot;&gt;1. Main Struct&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-main-struct&quot; aria-label=&quot;Anchor link for: 1-main-struct&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Rust&lt;&#x2F;code&gt;로 작성된 대부분의 &lt;code&gt;Near&lt;&#x2F;code&gt; 상의 Contract들은 하나의 Struct와 이에 대한 Impl이 구현된 패턴을 갖는다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래 코드는 본 Contract에서 사용될 struct 이다.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;rs&quot; class=&quot;language-rs z-code&quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;near_bindgen&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;BorshDeserialize&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; BorshSerialize&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;Storage&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;pairs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;UnorderedMap&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;String&lt;&#x2F;span&gt;, &lt;span class=&quot;z-support z-type z-rust&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Storage&lt;&#x2F;code&gt; 는 &lt;code&gt;near_sdk&lt;&#x2F;code&gt;에서 제공하는 자료구조 중 &lt;code&gt;unordered_map&lt;&#x2F;code&gt;타입의 &lt;code&gt;pairs&lt;&#x2F;code&gt;라는 필드를 갖는다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#[near_bindgen]&lt;&#x2F;code&gt; 속성을 통해, &lt;code&gt;Near&lt;&#x2F;code&gt;와 상호작용할 수 있는 형태의 Wasm으로 컴파일 된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#[derive(BorshDeserialize, BorshSerialize)]&lt;&#x2F;code&gt; 속성은 &lt;code&gt;Storage&lt;&#x2F;code&gt;로 하여금 내부적으로 Serialize, Deserialize가 가능하도록 해준다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;2-default-impl&quot;&gt;2. Default Impl&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-default-impl&quot; aria-label=&quot;Anchor link for: 2-default-impl&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Contract에서 사용할 struct에 대해 직접 Default 를 구현해준다.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;rs&quot; class=&quot;language-rs z-code&quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;Default &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;for&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt; &lt;span class=&quot;z-entity z-name z-impl z-rust&quot;&gt;Storage&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;default&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;Self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;Self&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          pairs&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;UnorderedMap&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-string z-rust&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;default&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnorderedMap::new(prefix: S) where S: IntoStorageKey&lt;&#x2F;code&gt;는 함수 인자로 &lt;code&gt;prefix&lt;&#x2F;code&gt;를 받아 identifier로 사용한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;3-core-logic&quot;&gt;3. Core Logic&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-core-logic&quot; aria-label=&quot;Anchor link for: 3-core-logic&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이제 Contract의 핵심 기능을 구현한다.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;rs&quot; class=&quot;language-rs z-code&quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;near_bindgen&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-impl z-rust&quot;&gt;Storage&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;create_update&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;k&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; String, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;v&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; String&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;env&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;log&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-string z-rust&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;created or updated&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;pairs&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;k&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;v&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;read&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;k&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; String&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;env&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;log&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-string z-rust&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;read&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;pairs&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;get&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;k&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;delete&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;k&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; String&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;env&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;log&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-string z-rust&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;delete&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;pairs&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;k&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pub&lt;&#x2F;code&gt; 키워드를 붙여야 Contract가 배포된 후에 외부에서도 호출이 가능하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;또한, 함수 인자로 사용한 변수명(&lt;code&gt;k&lt;&#x2F;code&gt;, &lt;code&gt;v&lt;&#x2F;code&gt;)은 외부에서 호출할 때도 동일하게 사용하게 된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;env::log()&lt;&#x2F;code&gt; 함수를 이용하여 logging message 를 띄운다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;4-tests&quot;&gt;4. Tests&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-tests&quot; aria-label=&quot;Anchor link for: 4-tests&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;마지막으로, 구현한 Contract에 대한 Test Case를 작성할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;가상환경에서 Contract를 실행시켜보기 위해 &lt;code&gt;near_sdk&lt;&#x2F;code&gt;는 &lt;code&gt;testing_env!()&lt;&#x2F;code&gt; 매크로와 &lt;code&gt;VMContext&lt;&#x2F;code&gt; struct 등을 제공한다.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;rs&quot; class=&quot;language-rs z-code&quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-rust&quot;&gt;&lt;span class=&quot;z-variable z-function z-rust&quot;&gt;not&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-rust&quot;&gt;target_arch &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;wasm32&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;test&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-module z-rust&quot;&gt;mod&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-module z-rust&quot;&gt;tests&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;super&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;near_sdk&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;MockedBlockchain&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;near_sdk&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;testing_env&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; VMContext&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;get_context&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;input&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;is_view&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;bool&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; VMContext&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      VMContext &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          current_account_id&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;alice_near&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          signer_account_id&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;bob_near&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          signer_account_pk&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          predecessor_account_id&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;carol_near&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          input&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          block_index&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          block_timestamp&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          account_balance&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          account_locked_balance&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          storage_usage&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          attached_deposit&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          prepaid_gas&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-numeric z-rust&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;18&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          random_seed&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          is_view&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          output_data_receivers&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;          epoch_height&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Test 1
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Test 2
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-module z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;creating&amp;amp;update and read&lt;&#x2F;code&gt;를 테스트하는 코드는 아래와 같다.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;rs&quot; class=&quot;language-rs z-code&quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;test&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;create_read_pair&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; context &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-rust&quot;&gt;get_context&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-rust&quot;&gt;false&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;testing_env!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;context&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; contract &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;KeyValue&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;default&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    contract&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;create_update&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;first_key&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;hello&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;        &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;hello&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;        contract&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;read&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;first_key&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;testing_env!()&lt;&#x2F;code&gt; 매크로를 이용하여 가상환경을 만든다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;contract&lt;&#x2F;code&gt; 변수를 만든 다음, 메소드를 호출하여 함수 동작을 테스트한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;여기까지 모든 코드를 &lt;code&gt;lib.rs&lt;&#x2F;code&gt;에 작성했다면, 아래 명령으로 contract를 테스트 해볼 수 있다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; test&lt;span class=&quot;z-keyword z-operator z-end-of-options z-shell&quot;&gt; --&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; --nocapture&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;deploying-the-contract&quot;&gt;Deploying the Contract&lt;a class=&quot;zola-anchor&quot; href=&quot;#deploying-the-contract&quot; aria-label=&quot;Anchor link for: deploying-the-contract&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;near-cli&lt;&#x2F;code&gt;를 이용하면 간편하게 Contract 를 Deploy하고 Interact할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;큰 순서는 &lt;code&gt;login&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;deploy&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;call&lt;&#x2F;code&gt; 이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;1-login&quot;&gt;1. login&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-login&quot; aria-label=&quot;Anchor link for: 1-login&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;우선 아래의 명령을 입력하여, &lt;code&gt;near-cli&lt;&#x2F;code&gt;로 wallet account에 로그인 해야한다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; login&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이를 위해서는 &lt;code&gt;Near Testnet Account&lt;&#x2F;code&gt;가 필요한데, 이는 [&lt;em&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;wallet.testnet.near.org&quot;&gt;near testnet wallet&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;]를 통해 생성할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;2-deploy&quot;&gt;2. deploy&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-deploy&quot; aria-label=&quot;Anchor link for: 2-deploy&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Smart Contract를 위한 계정을 하나 생성해야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Near&lt;&#x2F;code&gt;는 &lt;code&gt;Storage Staking&lt;&#x2F;code&gt; 이라는 메커니즘을 이용하는데, 이는 메모리 사용을 위해 일정량의 토큰을 예치하고 있어야 함을 의미한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;따라서, 아래와 같이 명령어를 입력하여 내 계정으로부터 일정량의 토큰을 예치하게 된다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; create-account CONTRACT_NAME.ACCOUNT_ID&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;masterAccount&lt;&#x2F;span&gt; ACCOUNT_ID&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;initialBalance&lt;&#x2F;span&gt; 10&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;그리고 생성된 계정으로 Contract를 deploy 하면 된다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; deploy&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;wasmFile&lt;&#x2F;span&gt; target&#x2F;wasm32-unknown-unknown&#x2F;release&#x2F;my_contract.wasm&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;accountId&lt;&#x2F;span&gt; CONTRACT_ID&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이 때, &lt;code&gt;CONTRACT_ID&lt;&#x2F;code&gt;는 &lt;code&gt;CONTRACT_NAME.ACCOUNT_ID&lt;&#x2F;code&gt; 이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;만약, &lt;code&gt;CONTRACT_NAME&lt;&#x2F;code&gt;으로 &lt;code&gt;dodo&lt;&#x2F;code&gt;를 사용하고, 내 &lt;code&gt;ACCOUNT_ID&lt;&#x2F;code&gt;가 &lt;code&gt;1234.testnet&lt;&#x2F;code&gt;이라면 아래와 같이 입력하면 된다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; create-account dodo.1234.testnet&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;masterAccount&lt;&#x2F;span&gt; 1234.testnet&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;initialBalance&lt;&#x2F;span&gt; 10&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; deploy&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;wasmFile&lt;&#x2F;span&gt; target&#x2F;wasm32-unknown-unknown&#x2F;release&#x2F;my_contract.wasm&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;accountId&lt;&#x2F;span&gt; dodo.1234.testnet&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;경우에 따라서는, &lt;code&gt;initialBalance&lt;&#x2F;code&gt;의 양이 부족하여 deploy가 실패할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;그런 경우에는 아래 명령을 통해 토큰을 조금 더 예치하면 된다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; send ACCOUNT_ID CONTRACT_ID AMOUNT&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;위의 예시에서 10 만큼을 더 보내고자 한다면 아래와 같다.&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; send 1234.testnet dodo.1234.testnet 10&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;3-call&quot;&gt;3. Call&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-call&quot; aria-label=&quot;Anchor link for: 3-call&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이제 배포된 Contract 를 호출해본다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;순서는 &lt;code&gt;create&lt;&#x2F;code&gt;, &lt;code&gt;read&lt;&#x2F;code&gt;, &lt;code&gt;delete&lt;&#x2F;code&gt; 로 진행된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;우선 {&quot;apple: &quot;red&quot;, &quot;sky&quot;: &quot;blue&quot;} 의 Key-Value 를 입력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; call CONTRACT_ID create_update &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;{&amp;quot;k&amp;quot;: &amp;quot;apple&amp;quot;, &amp;quot;v&amp;quot;: &amp;quot;red&amp;quot;}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;accountId&lt;&#x2F;span&gt; ACCOUNT_ID&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; call CONTRACT_ID create_update &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;{&amp;quot;k&amp;quot;: &amp;quot;sky&amp;quot;, &amp;quot;v&amp;quot;: &amp;quot;blue&amp;quot;}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;accountId&lt;&#x2F;span&gt; ACCOUNT_ID&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;다음으로, 입력된 값을 확인한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; view CONTRACT_ID read &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;{&amp;quot;k&amp;quot;: &amp;quot;apple&amp;quot;}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;accountId&lt;&#x2F;span&gt; ACCOUNT_ID&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; view CONTRACT_ID read &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;{&amp;quot;k&amp;quot;: &amp;quot;sky&amp;quot;}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;accountId&lt;&#x2F;span&gt; ACCOUNT_ID&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;내부 상태를 변경하지 않는 함수를 호출할 때는 &lt;code&gt;view&lt;&#x2F;code&gt;를 사용할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;view&lt;&#x2F;code&gt;를 사용하면, fee를 낼 필요도 없고 응답도 거의 즉각적으로 받을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;마지막으로, 저장된 값들을 제거하는 명령은 아래와 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; call CONTRACT_ID delete &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;{&amp;quot;k&amp;quot;: &amp;quot;apple&amp;quot;}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;accountId&lt;&#x2F;span&gt; ACCOUNT_ID&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;near&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; call CONTRACT_ID delete &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;{&amp;quot;k&amp;quot;: &amp;quot;sky&amp;quot;}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;accountId&lt;&#x2F;span&gt; ACCOUNT_ID&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;jeongri&quot;&gt;정리&lt;a class=&quot;zola-anchor&quot; href=&quot;#jeongri&quot; aria-label=&quot;Anchor link for: jeongri&quot; style=&quot;visibility: hidden;&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;본 포스팅에서는 &lt;code&gt;Rust&lt;&#x2F;code&gt; 언어로 &lt;code&gt;Near Smart Contract&lt;&#x2F;code&gt;를 작성하고,
이를 &lt;code&gt;Rust toolchain&lt;&#x2F;code&gt;과 &lt;code&gt;near_sdk&lt;&#x2F;code&gt;를 이용하여 &lt;code&gt;Wasm&lt;&#x2F;code&gt;으로 컴파일한 뒤,
&lt;code&gt;near-cli&lt;&#x2F;code&gt;를 이용해 on-chain에 deploy하고 interact하는 것을 실습해보았다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>